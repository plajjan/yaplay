import xml
import yang.adata
import yang.data

# == This file is generated ==


class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry(yang.adata.MNode):
    id: str

    def __init__(self, id: str):
        self.id = id

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.id)])
        _id = self.id
        if _id is not None:
            res.children['id'] = yang.data.Leaf('id', _id)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry(id=n.get_str("id"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry(id=yang.data.from_xml_str(n, "id"))

class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry]
    def __init__(self, elements=[]):
        self._name = 'cloud-identifier'
        self.elements = elements

    def create(self, id):
        res = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry(id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('cloud-identifier', ['id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry(yang.adata.MNode):
    id: str

    def __init__(self, id: str):
        self.id = id

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.id)])
        _id = self.id
        if _id is not None:
            res.children['id'] = yang.data.Leaf('id', _id)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry(id=n.get_str("id"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry(id=yang.data.from_xml_str(n, "id"))

class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry]
    def __init__(self, elements=[]):
        self._name = 'encryption-profile-identifier'
        self.elements = elements

    def create(self, id):
        res = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry(id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('encryption-profile-identifier', ['id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry(yang.adata.MNode):
    id: str

    def __init__(self, id: str):
        self.id = id

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.id)])
        _id = self.id
        if _id is not None:
            res.children['id'] = yang.data.Leaf('id', _id)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry(id=n.get_str("id"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry(id=yang.data.from_xml_str(n, "id"))

class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry]
    def __init__(self, elements=[]):
        self._name = 'qos-profile-identifier'
        self.elements = elements

    def create(self, id):
        res = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry(id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('qos-profile-identifier', ['id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry(yang.adata.MNode):
    id: str

    def __init__(self, id: str):
        self.id = id

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.id)])
        _id = self.id
        if _id is not None:
            res.children['id'] = yang.data.Leaf('id', _id)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry(id=n.get_str("id"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry(id=yang.data.from_xml_str(n, "id"))

class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry]
    def __init__(self, elements=[]):
        self._name = 'bfd-profile-identifier'
        self.elements = elements

    def create(self, id):
        res = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry(id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('bfd-profile-identifier', ['id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers(yang.adata.MNode):
    cloud_identifier: ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier
    encryption_profile_identifier: ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier
    qos_profile_identifier: ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier
    bfd_profile_identifier: ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier

    def __init__(self, cloud_identifier: list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier_entry]=[], encryption_profile_identifier: list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier_entry]=[], qos_profile_identifier: list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier_entry]=[], bfd_profile_identifier: list[ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier_entry]=[]):
        self.cloud_identifier = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier(elements=cloud_identifier)
        self.encryption_profile_identifier = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier(elements=encryption_profile_identifier)
        self.qos_profile_identifier = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier(elements=qos_profile_identifier)
        self.bfd_profile_identifier = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier(elements=bfd_profile_identifier)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('valid-provider-identifiers')
        _cloud_identifier = self.cloud_identifier
        _encryption_profile_identifier = self.encryption_profile_identifier
        _qos_profile_identifier = self.qos_profile_identifier
        _bfd_profile_identifier = self.bfd_profile_identifier
        if _cloud_identifier is not None:
            res.children['cloud-identifier'] = self.cloud_identifier.to_gdata()
        if _encryption_profile_identifier is not None:
            res.children['encryption-profile-identifier'] = self.encryption_profile_identifier.to_gdata()
        if _qos_profile_identifier is not None:
            res.children['qos-profile-identifier'] = self.qos_profile_identifier.to_gdata()
        if _bfd_profile_identifier is not None:
            res.children['bfd-profile-identifier'] = self.bfd_profile_identifier.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers(cloud_identifier=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier.from_gdata(n.get_list("cloud-identifier")), encryption_profile_identifier=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier.from_gdata(n.get_list("encryption-profile-identifier")), qos_profile_identifier=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier.from_gdata(n.get_list("qos-profile-identifier")), bfd_profile_identifier=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier.from_gdata(n.get_list("bfd-profile-identifier")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers(cloud_identifier=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__cloud_identifier.from_xml(yang.data.get_xml_children(n, "cloud-identifier")), encryption_profile_identifier=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__encryption_profile_identifier.from_xml(yang.data.get_xml_children(n, "encryption-profile-identifier")), qos_profile_identifier=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__qos_profile_identifier.from_xml(yang.data.get_xml_children(n, "qos-profile-identifier")), bfd_profile_identifier=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers__bfd_profile_identifier.from_xml(yang.data.get_xml_children(n, "bfd-profile-identifier")))


class ietf_l3vpn_svc__l3vpn_svc__vpn_profiles(yang.adata.MNode):
    valid_provider_identifiers: ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers

    def __init__(self, valid_provider_identifiers: ?ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers):
        if valid_provider_identifiers is not None:
            self.valid_provider_identifiers = valid_provider_identifiers
        else:
            self.valid_provider_identifiers = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('vpn-profiles')
        _valid_provider_identifiers = self.valid_provider_identifiers
        if _valid_provider_identifiers is not None:
            res.children['valid-provider-identifiers'] = self.valid_provider_identifiers.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles(valid_provider_identifiers=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers.from_gdata(n.get_container("valid-provider-identifiers")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_profiles:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_profiles(valid_provider_identifiers=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles__valid_provider_identifiers.from_xml(yang.data.get_xml_child(n, "valid-provider-identifiers")))


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44(yang.adata.MNode):
    enabled: ?bool
    nat44_customer_address: ?str

    def __init__(self, enabled: ?bool, nat44_customer_address: ?str):
        self.enabled = enabled
        self.nat44_customer_address = nat44_customer_address

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('nat44')
        _enabled = self.enabled
        _nat44_customer_address = self.nat44_customer_address
        if _enabled is not None:
            res.children['enabled'] = yang.data.Leaf('enabled', _enabled)
        if _nat44_customer_address is not None:
            res.children['nat44-customer-address'] = yang.data.Leaf('nat44-customer-address', _nat44_customer_address)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44(enabled=n.get_opt_bool("enabled"), nat44_customer_address=n.get_opt_str("nat44-customer-address"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44(enabled=yang.data.from_xml_opt_bool(n, "enabled"), nat44_customer_address=yang.data.from_xml_opt_str(n, "nat44-customer-address"))


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation(yang.adata.MNode):
    nat44: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44

    def __init__(self, nat44: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44):
        if nat44 is not None:
            self.nat44 = nat44
        else:
            self.nat44 = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('address-translation')
        _nat44 = self.nat44
        if _nat44 is not None:
            res.children['nat44'] = self.nat44.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation(nat44=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44.from_gdata(n.get_container("nat44")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation(nat44=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation__nat44.from_xml(yang.data.get_xml_child(n, "nat44")))


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry(yang.adata.MNode):
    cloud_identifier: str
    permit_any: ?bool
    permit_site: list[str]
    deny_site: list[str]
    address_translation: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation

    def __init__(self, cloud_identifier: str, permit_any: ?bool, permit_site: ?list[str]=None, deny_site: ?list[str]=None, address_translation: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation):
        self.cloud_identifier = cloud_identifier
        self.permit_any = permit_any
        if permit_site is not None:
            self.permit_site = permit_site
        else:
            self.permit_site = []
        if deny_site is not None:
            self.deny_site = deny_site
        else:
            self.deny_site = []
        if address_translation is not None:
            self.address_translation = address_translation
        else:
            self.address_translation = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.cloud_identifier)])
        _cloud_identifier = self.cloud_identifier
        _permit_any = self.permit_any
        _address_translation = self.address_translation
        if _cloud_identifier is not None:
            res.children['cloud-identifier'] = yang.data.Leaf('cloud-identifier', _cloud_identifier)
        if _permit_any is not None:
            res.children['permit-any'] = yang.data.Leaf('permit-any', _permit_any)
        res.children['permit-site'] = yang.data.LeafList('permit-site', self.permit_site)
        res.children['deny-site'] = yang.data.LeafList('deny-site', self.deny_site)
        if _address_translation is not None:
            res.children['address-translation'] = self.address_translation.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry(cloud_identifier=n.get_str("cloud-identifier"), permit_any=n.get_opt_bool("permit-any"), permit_site=n.get_opt_strs("permit-site"), deny_site=n.get_opt_strs("deny-site"), address_translation=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation.from_gdata(n.get_container("address-translation")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry(cloud_identifier=yang.data.from_xml_str(n, "cloud-identifier"), permit_any=yang.data.from_xml_opt_bool(n, "permit-any"), permit_site=yang.data.from_xml_opt_strs(n, "permit-site"), deny_site=yang.data.from_xml_opt_strs(n, "deny-site"), address_translation=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access__address_translation.from_xml(yang.data.get_xml_child(n, "address-translation")))

class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry]
    def __init__(self, elements=[]):
        self._name = 'cloud-access'
        self.elements = elements

    def create(self, cloud_identifier):
        res = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry(cloud_identifier)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('cloud-access', ['cloud-identifier'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses(yang.adata.MNode):
    cloud_access: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access

    def __init__(self, cloud_access: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access_entry]=[]):
        self.cloud_access = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access(elements=cloud_access)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('cloud-accesses')
        _cloud_access = self.cloud_access
        if _cloud_access is not None:
            res.children['cloud-access'] = self.cloud_access.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses(cloud_access=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access.from_gdata(n.get_list("cloud-access")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses(cloud_access=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses__cloud_access.from_xml(yang.data.get_xml_children(n, "cloud-access")))


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors(yang.adata.MNode):
    tree_flavor: list[str]

    def __init__(self, tree_flavor: ?list[str]=None):
        if tree_flavor is not None:
            self.tree_flavor = tree_flavor
        else:
            self.tree_flavor = []

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('customer-tree-flavors')
        res.children['tree-flavor'] = yang.data.LeafList('tree-flavor', self.tree_flavor)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors(tree_flavor=n.get_opt_strs("tree-flavor"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors(tree_flavor=yang.data.from_xml_opt_strs(n, "tree-flavor"))


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed(yang.adata.MNode):
    enabled: ?bool
    rp_redundancy: ?bool
    optimal_traffic_delivery: ?bool

    def __init__(self, enabled: ?bool, rp_redundancy: ?bool, optimal_traffic_delivery: ?bool):
        self.enabled = enabled
        self.rp_redundancy = rp_redundancy
        self.optimal_traffic_delivery = optimal_traffic_delivery

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('provider-managed')
        _enabled = self.enabled
        _rp_redundancy = self.rp_redundancy
        _optimal_traffic_delivery = self.optimal_traffic_delivery
        if _enabled is not None:
            res.children['enabled'] = yang.data.Leaf('enabled', _enabled)
        if _rp_redundancy is not None:
            res.children['rp-redundancy'] = yang.data.Leaf('rp-redundancy', _rp_redundancy)
        if _optimal_traffic_delivery is not None:
            res.children['optimal-traffic-delivery'] = yang.data.Leaf('optimal-traffic-delivery', _optimal_traffic_delivery)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed(enabled=n.get_opt_bool("enabled"), rp_redundancy=n.get_opt_bool("rp-redundancy"), optimal_traffic_delivery=n.get_opt_bool("optimal-traffic-delivery"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed(enabled=yang.data.from_xml_opt_bool(n, "enabled"), rp_redundancy=yang.data.from_xml_opt_bool(n, "rp-redundancy"), optimal_traffic_delivery=yang.data.from_xml_opt_bool(n, "optimal-traffic-delivery"))


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry(yang.adata.MNode):
    id: int
    group_address: ?value
    group_start: ?value
    group_end: ?value

    def __init__(self, id: int, group_address: ?value, group_start: ?value, group_end: ?value):
        self.id = id
        self.group_address = group_address
        self.group_start = group_start
        self.group_end = group_end

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.id)])
        _id = self.id
        _group_address = self.group_address
        _group_start = self.group_start
        _group_end = self.group_end
        if _id is not None:
            res.children['id'] = yang.data.Leaf('id', _id)
        if _group_address is not None:
            res.children['group-address'] = yang.data.Leaf('group-address', _group_address)
        if _group_start is not None:
            res.children['group-start'] = yang.data.Leaf('group-start', _group_start)
        if _group_end is not None:
            res.children['group-end'] = yang.data.Leaf('group-end', _group_end)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry(id=n.get_int("id"), group_address=n.get_opt_value("group-address"), group_start=n.get_opt_value("group-start"), group_end=n.get_opt_value("group-end"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry(id=yang.data.from_xml_int(n, "id"), group_address=yang.data.from_xml_opt_value(n, "group-address"), group_start=yang.data.from_xml_opt_value(n, "group-start"), group_end=yang.data.from_xml_opt_value(n, "group-end"))

class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry]
    def __init__(self, elements=[]):
        self._name = 'group'
        self.elements = elements

    def create(self, id):
        res = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry(id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('group', ['id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups(yang.adata.MNode):
    group: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group

    def __init__(self, group: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group_entry]=[]):
        self.group = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group(elements=group)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('groups')
        _group = self.group
        if _group is not None:
            res.children['group'] = self.group.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups(group=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group.from_gdata(n.get_list("group")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups(group=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups__group.from_xml(yang.data.get_xml_children(n, "group")))


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry(yang.adata.MNode):
    id: int
    provider_managed: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed
    rp_address: ?value
    groups: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups

    def __init__(self, id: int, provider_managed: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed, rp_address: ?value, groups: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups):
        self.id = id
        if provider_managed is not None:
            self.provider_managed = provider_managed
        else:
            self.provider_managed = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed()
        self.rp_address = rp_address
        if groups is not None:
            self.groups = groups
        else:
            self.groups = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.id)])
        _id = self.id
        _provider_managed = self.provider_managed
        _rp_address = self.rp_address
        _groups = self.groups
        if _id is not None:
            res.children['id'] = yang.data.Leaf('id', _id)
        if _provider_managed is not None:
            res.children['provider-managed'] = self.provider_managed.to_gdata()
        if _rp_address is not None:
            res.children['rp-address'] = yang.data.Leaf('rp-address', _rp_address)
        if _groups is not None:
            res.children['groups'] = self.groups.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry(id=n.get_int("id"), provider_managed=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed.from_gdata(n.get_container("provider-managed")), rp_address=n.get_opt_value("rp-address"), groups=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups.from_gdata(n.get_container("groups")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry(id=yang.data.from_xml_int(n, "id"), provider_managed=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__provider_managed.from_xml(yang.data.get_xml_child(n, "provider-managed")), rp_address=yang.data.from_xml_opt_value(n, "rp-address"), groups=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping__groups.from_xml(yang.data.get_xml_child(n, "groups")))

class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry]
    def __init__(self, elements=[]):
        self._name = 'rp-group-mapping'
        self.elements = elements

    def create(self, id):
        res = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry(id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('rp-group-mapping', ['id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings(yang.adata.MNode):
    rp_group_mapping: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping

    def __init__(self, rp_group_mapping: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping_entry]=[]):
        self.rp_group_mapping = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping(elements=rp_group_mapping)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('rp-group-mappings')
        _rp_group_mapping = self.rp_group_mapping
        if _rp_group_mapping is not None:
            res.children['rp-group-mapping'] = self.rp_group_mapping.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings(rp_group_mapping=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping.from_gdata(n.get_list("rp-group-mapping")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings(rp_group_mapping=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings__rp_group_mapping.from_xml(yang.data.get_xml_children(n, "rp-group-mapping")))


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates(yang.adata.MNode):
    bsr_candidate_address: list[value]

    def __init__(self, bsr_candidate_address: ?list[value]=None):
        if bsr_candidate_address is not None:
            self.bsr_candidate_address = bsr_candidate_address
        else:
            self.bsr_candidate_address = []

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('bsr-candidates')
        res.children['bsr-candidate-address'] = yang.data.LeafList('bsr-candidate-address', self.bsr_candidate_address)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates(bsr_candidate_address=n.get_opt_values("bsr-candidate-address"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates(bsr_candidate_address=yang.data.from_xml_opt_values(n, "bsr-candidate-address"))


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery(yang.adata.MNode):
    rp_discovery_type: ?str
    bsr_candidates: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates

    def __init__(self, rp_discovery_type: ?str, bsr_candidates: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates):
        self.rp_discovery_type = rp_discovery_type
        if bsr_candidates is not None:
            self.bsr_candidates = bsr_candidates
        else:
            self.bsr_candidates = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('rp-discovery')
        _rp_discovery_type = self.rp_discovery_type
        _bsr_candidates = self.bsr_candidates
        if _rp_discovery_type is not None:
            res.children['rp-discovery-type'] = yang.data.Leaf('rp-discovery-type', _rp_discovery_type)
        if _bsr_candidates is not None:
            res.children['bsr-candidates'] = self.bsr_candidates.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery(rp_discovery_type=n.get_opt_str("rp-discovery-type"), bsr_candidates=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates.from_gdata(n.get_container("bsr-candidates")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery(rp_discovery_type=yang.data.from_xml_opt_str(n, "rp-discovery-type"), bsr_candidates=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery__bsr_candidates.from_xml(yang.data.get_xml_child(n, "bsr-candidates")))


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp(yang.adata.MNode):
    rp_group_mappings: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings
    rp_discovery: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery

    def __init__(self, rp_group_mappings: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings, rp_discovery: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery):
        if rp_group_mappings is not None:
            self.rp_group_mappings = rp_group_mappings
        else:
            self.rp_group_mappings = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings()
        if rp_discovery is not None:
            self.rp_discovery = rp_discovery
        else:
            self.rp_discovery = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('rp')
        _rp_group_mappings = self.rp_group_mappings
        _rp_discovery = self.rp_discovery
        if _rp_group_mappings is not None:
            res.children['rp-group-mappings'] = self.rp_group_mappings.to_gdata()
        if _rp_discovery is not None:
            res.children['rp-discovery'] = self.rp_discovery.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp(rp_group_mappings=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings.from_gdata(n.get_container("rp-group-mappings")), rp_discovery=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery.from_gdata(n.get_container("rp-discovery")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp(rp_group_mappings=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_group_mappings.from_xml(yang.data.get_xml_child(n, "rp-group-mappings")), rp_discovery=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp__rp_discovery.from_xml(yang.data.get_xml_child(n, "rp-discovery")))


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast(yang.adata.MNode):
    enabled: ?bool
    customer_tree_flavors: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors
    rp: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp

    def __init__(self, enabled: ?bool, customer_tree_flavors: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors, rp: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp):
        self.enabled = enabled
        if customer_tree_flavors is not None:
            self.customer_tree_flavors = customer_tree_flavors
        else:
            self.customer_tree_flavors = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors()
        if rp is not None:
            self.rp = rp
        else:
            self.rp = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('multicast')
        _enabled = self.enabled
        _customer_tree_flavors = self.customer_tree_flavors
        _rp = self.rp
        if _enabled is not None:
            res.children['enabled'] = yang.data.Leaf('enabled', _enabled)
        if _customer_tree_flavors is not None:
            res.children['customer-tree-flavors'] = self.customer_tree_flavors.to_gdata()
        if _rp is not None:
            res.children['rp'] = self.rp.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast(enabled=n.get_opt_bool("enabled"), customer_tree_flavors=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors.from_gdata(n.get_container("customer-tree-flavors")), rp=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp.from_gdata(n.get_container("rp")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast(enabled=yang.data.from_xml_opt_bool(n, "enabled"), customer_tree_flavors=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__customer_tree_flavors.from_xml(yang.data.get_xml_child(n, "customer-tree-flavors")), rp=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast__rp.from_xml(yang.data.get_xml_child(n, "rp")))


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry(yang.adata.MNode):
    vpn_id: str
    local_sites_role: ?str

    def __init__(self, vpn_id: str, local_sites_role: ?str):
        self.vpn_id = vpn_id
        self.local_sites_role = local_sites_role

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.vpn_id)])
        _vpn_id = self.vpn_id
        _local_sites_role = self.local_sites_role
        if _vpn_id is not None:
            res.children['vpn-id'] = yang.data.Leaf('vpn-id', _vpn_id)
        if _local_sites_role is not None:
            res.children['local-sites-role'] = yang.data.Leaf('local-sites-role', _local_sites_role)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry(vpn_id=n.get_str("vpn-id"), local_sites_role=n.get_opt_str("local-sites-role"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry(vpn_id=yang.data.from_xml_str(n, "vpn-id"), local_sites_role=yang.data.from_xml_opt_str(n, "local-sites-role"))

class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry]
    def __init__(self, elements=[]):
        self._name = 'extranet-vpn'
        self.elements = elements

    def create(self, vpn_id):
        res = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry(vpn_id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('extranet-vpn', ['vpn-id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns(yang.adata.MNode):
    extranet_vpn: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn

    def __init__(self, extranet_vpn: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn_entry]=[]):
        self.extranet_vpn = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn(elements=extranet_vpn)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('extranet-vpns')
        _extranet_vpn = self.extranet_vpn
        if _extranet_vpn is not None:
            res.children['extranet-vpn'] = self.extranet_vpn.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns(extranet_vpn=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn.from_gdata(n.get_list("extranet-vpn")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns(extranet_vpn=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns__extranet_vpn.from_xml(yang.data.get_xml_children(n, "extranet-vpn")))


class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry(yang.adata.MNode):
    vpn_id: str
    customer_name: ?str
    vpn_service_topology: ?str
    cloud_accesses: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses
    multicast: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast
    carrierscarrier: ?bool
    extranet_vpns: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns

    def __init__(self, vpn_id: str, customer_name: ?str, vpn_service_topology: ?str, cloud_accesses: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses, multicast: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast, carrierscarrier: ?bool, extranet_vpns: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns):
        self.vpn_id = vpn_id
        self.customer_name = customer_name
        self.vpn_service_topology = vpn_service_topology
        if cloud_accesses is not None:
            self.cloud_accesses = cloud_accesses
        else:
            self.cloud_accesses = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses()
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast()
        self.carrierscarrier = carrierscarrier
        if extranet_vpns is not None:
            self.extranet_vpns = extranet_vpns
        else:
            self.extranet_vpns = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.vpn_id)])
        _vpn_id = self.vpn_id
        _customer_name = self.customer_name
        _vpn_service_topology = self.vpn_service_topology
        _cloud_accesses = self.cloud_accesses
        _multicast = self.multicast
        _carrierscarrier = self.carrierscarrier
        _extranet_vpns = self.extranet_vpns
        if _vpn_id is not None:
            res.children['vpn-id'] = yang.data.Leaf('vpn-id', _vpn_id)
        if _customer_name is not None:
            res.children['customer-name'] = yang.data.Leaf('customer-name', _customer_name)
        if _vpn_service_topology is not None:
            res.children['vpn-service-topology'] = yang.data.Leaf('vpn-service-topology', _vpn_service_topology)
        if _cloud_accesses is not None:
            res.children['cloud-accesses'] = self.cloud_accesses.to_gdata()
        if _multicast is not None:
            res.children['multicast'] = self.multicast.to_gdata()
        if _carrierscarrier is not None:
            res.children['carrierscarrier'] = yang.data.Leaf('carrierscarrier', _carrierscarrier)
        if _extranet_vpns is not None:
            res.children['extranet-vpns'] = self.extranet_vpns.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry(vpn_id=n.get_str("vpn-id"), customer_name=n.get_opt_str("customer-name"), vpn_service_topology=n.get_opt_str("vpn-service-topology"), cloud_accesses=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses.from_gdata(n.get_container("cloud-accesses")), multicast=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast.from_gdata(n.get_container("multicast")), carrierscarrier=n.get_opt_bool("carrierscarrier"), extranet_vpns=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns.from_gdata(n.get_container("extranet-vpns")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry(vpn_id=yang.data.from_xml_str(n, "vpn-id"), customer_name=yang.data.from_xml_opt_str(n, "customer-name"), vpn_service_topology=yang.data.from_xml_opt_str(n, "vpn-service-topology"), cloud_accesses=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__cloud_accesses.from_xml(yang.data.get_xml_child(n, "cloud-accesses")), multicast=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__multicast.from_xml(yang.data.get_xml_child(n, "multicast")), carrierscarrier=yang.data.from_xml_opt_bool(n, "carrierscarrier"), extranet_vpns=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service__extranet_vpns.from_xml(yang.data.get_xml_child(n, "extranet-vpns")))

class ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry]
    def __init__(self, elements=[]):
        self._name = 'vpn-service'
        self.elements = elements

    def create(self, vpn_id):
        res = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry(vpn_id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('vpn-service', ['vpn-id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__vpn_services(yang.adata.MNode):
    vpn_service: ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service

    def __init__(self, vpn_service: list[ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry]=[]):
        self.vpn_service = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service(elements=vpn_service)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('vpn-services')
        _vpn_service = self.vpn_service
        if _vpn_service is not None:
            res.children['vpn-service'] = self.vpn_service.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services(vpn_service=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service.from_gdata(n.get_list("vpn-service")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__vpn_services:
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services(vpn_service=ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service.from_xml(yang.data.get_xml_children(n, "vpn-service")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry(yang.adata.MNode):
    location_id: str
    address: ?str
    postal_code: ?str
    state: ?str
    city: ?str
    country_code: ?str

    def __init__(self, location_id: str, address: ?str, postal_code: ?str, state: ?str, city: ?str, country_code: ?str):
        self.location_id = location_id
        self.address = address
        self.postal_code = postal_code
        self.state = state
        self.city = city
        self.country_code = country_code

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.location_id)])
        _location_id = self.location_id
        _address = self.address
        _postal_code = self.postal_code
        _state = self.state
        _city = self.city
        _country_code = self.country_code
        if _location_id is not None:
            res.children['location-id'] = yang.data.Leaf('location-id', _location_id)
        if _address is not None:
            res.children['address'] = yang.data.Leaf('address', _address)
        if _postal_code is not None:
            res.children['postal-code'] = yang.data.Leaf('postal-code', _postal_code)
        if _state is not None:
            res.children['state'] = yang.data.Leaf('state', _state)
        if _city is not None:
            res.children['city'] = yang.data.Leaf('city', _city)
        if _country_code is not None:
            res.children['country-code'] = yang.data.Leaf('country-code', _country_code)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry(location_id=n.get_str("location-id"), address=n.get_opt_str("address"), postal_code=n.get_opt_str("postal-code"), state=n.get_opt_str("state"), city=n.get_opt_str("city"), country_code=n.get_opt_str("country-code"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry(location_id=yang.data.from_xml_str(n, "location-id"), address=yang.data.from_xml_opt_str(n, "address"), postal_code=yang.data.from_xml_opt_str(n, "postal-code"), state=yang.data.from_xml_opt_str(n, "state"), city=yang.data.from_xml_opt_str(n, "city"), country_code=yang.data.from_xml_opt_str(n, "country-code"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry]
    def __init__(self, elements=[]):
        self._name = 'location'
        self.elements = elements

    def create(self, location_id):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry(location_id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('location', ['location-id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__locations(yang.adata.MNode):
    location: ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location

    def __init__(self, location: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location_entry]=[]):
        self.location = ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location(elements=location)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('locations')
        _location = self.location
        if _location is not None:
            res.children['location'] = self.location.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__locations:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__locations(location=ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location.from_gdata(n.get_list("location")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__locations:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__locations(location=ietf_l3vpn_svc__l3vpn_svc__sites__site__locations__location.from_xml(yang.data.get_xml_children(n, "location")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management(yang.adata.MNode):
    address_family: ?str
    address: ?value

    def __init__(self, address_family: ?str, address: ?value):
        self.address_family = address_family
        self.address = address

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('management')
        _address_family = self.address_family
        _address = self.address
        if _address_family is not None:
            res.children['address-family'] = yang.data.Leaf('address-family', _address_family)
        if _address is not None:
            res.children['address'] = yang.data.Leaf('address', _address)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management(address_family=n.get_opt_str("address-family"), address=n.get_opt_value("address"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management(address_family=yang.data.from_xml_opt_str(n, "address-family"), address=yang.data.from_xml_opt_value(n, "address"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry(yang.adata.MNode):
    device_id: str
    location: ?str
    management: ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management

    def __init__(self, device_id: str, location: ?str, management: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management):
        self.device_id = device_id
        self.location = location
        if management is not None:
            self.management = management
        else:
            self.management = ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.device_id)])
        _device_id = self.device_id
        _location = self.location
        _management = self.management
        if _device_id is not None:
            res.children['device-id'] = yang.data.Leaf('device-id', _device_id)
        if _location is not None:
            res.children['location'] = yang.data.Leaf('location', _location)
        if _management is not None:
            res.children['management'] = self.management.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry(device_id=n.get_str("device-id"), location=n.get_opt_str("location"), management=ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management.from_gdata(n.get_container("management")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry(device_id=yang.data.from_xml_str(n, "device-id"), location=yang.data.from_xml_opt_str(n, "location"), management=ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device__management.from_xml(yang.data.get_xml_child(n, "management")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry]
    def __init__(self, elements=[]):
        self._name = 'device'
        self.elements = elements

    def create(self, device_id):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry(device_id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('device', ['device-id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__devices(yang.adata.MNode):
    device: ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device

    def __init__(self, device: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device_entry]=[]):
        self.device = ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device(elements=device)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('devices')
        _device = self.device
        if _device is not None:
            res.children['device'] = self.device.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__devices:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__devices(device=ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device.from_gdata(n.get_list("device")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__devices:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__devices(device=ietf_l3vpn_svc__l3vpn_svc__sites__site__devices__device.from_xml(yang.data.get_xml_children(n, "device")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry(yang.adata.MNode):
    group_id: str

    def __init__(self, group_id: str):
        self.group_id = group_id

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.group_id)])
        _group_id = self.group_id
        if _group_id is not None:
            res.children['group-id'] = yang.data.Leaf('group-id', _group_id)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry(group_id=n.get_str("group-id"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry(group_id=yang.data.from_xml_str(n, "group-id"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry]
    def __init__(self, elements=[]):
        self._name = 'group'
        self.elements = elements

    def create(self, group_id):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry(group_id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('group', ['group-id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups(yang.adata.MNode):
    group: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group

    def __init__(self, group: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group_entry]=[]):
        self.group = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group(elements=group)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('groups')
        _group = self.group
        if _group is not None:
            res.children['group'] = self.group.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups(group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group.from_gdata(n.get_list("group")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups(group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups__group.from_xml(yang.data.get_xml_children(n, "group")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity(yang.adata.MNode):
    groups: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups

    def __init__(self, groups: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups):
        if groups is not None:
            self.groups = groups
        else:
            self.groups = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('site-diversity')
        _groups = self.groups
        if _groups is not None:
            res.children['groups'] = self.groups.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity(groups=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups.from_gdata(n.get_container("groups")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity(groups=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity__groups.from_xml(yang.data.get_xml_child(n, "groups")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__management(yang.adata.MNode):
    type: ?str

    def __init__(self, type: ?str):
        self.type = type

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('management')
        _type = self.type
        if _type is not None:
            res.children['type'] = yang.data.Leaf('type', _type)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__management:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__management(type=n.get_opt_str("type"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__management:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__management(type=yang.data.from_xml_opt_str(n, "type"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry(yang.adata.MNode):
    type: str
    lan_tag: list[str]
    ipv4_lan_prefix: list[str]
    ipv6_lan_prefix: list[str]

    def __init__(self, type: str, lan_tag: ?list[str]=None, ipv4_lan_prefix: ?list[str]=None, ipv6_lan_prefix: ?list[str]=None):
        self.type = type
        if lan_tag is not None:
            self.lan_tag = lan_tag
        else:
            self.lan_tag = []
        if ipv4_lan_prefix is not None:
            self.ipv4_lan_prefix = ipv4_lan_prefix
        else:
            self.ipv4_lan_prefix = []
        if ipv6_lan_prefix is not None:
            self.ipv6_lan_prefix = ipv6_lan_prefix
        else:
            self.ipv6_lan_prefix = []

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.type)])
        _type = self.type
        if _type is not None:
            res.children['type'] = yang.data.Leaf('type', _type)
        res.children['lan-tag'] = yang.data.LeafList('lan-tag', self.lan_tag)
        res.children['ipv4-lan-prefix'] = yang.data.LeafList('ipv4-lan-prefix', self.ipv4_lan_prefix)
        res.children['ipv6-lan-prefix'] = yang.data.LeafList('ipv6-lan-prefix', self.ipv6_lan_prefix)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry(type=n.get_str("type"), lan_tag=n.get_opt_strs("lan-tag"), ipv4_lan_prefix=n.get_opt_strs("ipv4-lan-prefix"), ipv6_lan_prefix=n.get_opt_strs("ipv6-lan-prefix"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry(type=yang.data.from_xml_str(n, "type"), lan_tag=yang.data.from_xml_opt_strs(n, "lan-tag"), ipv4_lan_prefix=yang.data.from_xml_opt_strs(n, "ipv4-lan-prefix"), ipv6_lan_prefix=yang.data.from_xml_opt_strs(n, "ipv6-lan-prefix"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry]
    def __init__(self, elements=[]):
        self._name = 'filter'
        self.elements = elements

    def create(self, type):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry(type)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('filter', ['type'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters(yang.adata.MNode):
    filter: ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter

    def __init__(self, filter: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter_entry]=[]):
        self.filter = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter(elements=filter)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('filters')
        _filter = self.filter
        if _filter is not None:
            res.children['filter'] = self.filter.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters(filter=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter.from_gdata(n.get_list("filter")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters(filter=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters__filter.from_xml(yang.data.get_xml_children(n, "filter")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry(yang.adata.MNode):
    vpn_id: str
    site_role: ?str

    def __init__(self, vpn_id: str, site_role: ?str):
        self.vpn_id = vpn_id
        self.site_role = site_role

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.vpn_id)])
        _vpn_id = self.vpn_id
        _site_role = self.site_role
        if _vpn_id is not None:
            res.children['vpn-id'] = yang.data.Leaf('vpn-id', _vpn_id)
        if _site_role is not None:
            res.children['site-role'] = yang.data.Leaf('site-role', _site_role)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry(vpn_id=n.get_str("vpn-id"), site_role=n.get_opt_str("site-role"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry(vpn_id=yang.data.from_xml_str(n, "vpn-id"), site_role=yang.data.from_xml_opt_str(n, "site-role"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry]
    def __init__(self, elements=[]):
        self._name = 'vpn'
        self.elements = elements

    def create(self, vpn_id):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry(vpn_id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('vpn', ['vpn-id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry(yang.adata.MNode):
    id: str
    filters: ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters
    vpn: ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn

    def __init__(self, id: str, filters: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters, vpn: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn_entry]=[]):
        self.id = id
        if filters is not None:
            self.filters = filters
        else:
            self.filters = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters()
        self.vpn = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn(elements=vpn)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.id)])
        _id = self.id
        _filters = self.filters
        _vpn = self.vpn
        if _id is not None:
            res.children['id'] = yang.data.Leaf('id', _id)
        if _filters is not None:
            res.children['filters'] = self.filters.to_gdata()
        if _vpn is not None:
            res.children['vpn'] = self.vpn.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry(id=n.get_str("id"), filters=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters.from_gdata(n.get_container("filters")), vpn=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn.from_gdata(n.get_list("vpn")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry(id=yang.data.from_xml_str(n, "id"), filters=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__filters.from_xml(yang.data.get_xml_child(n, "filters")), vpn=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries__vpn.from_xml(yang.data.get_xml_children(n, "vpn")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry]
    def __init__(self, elements=[]):
        self._name = 'entries'
        self.elements = elements

    def create(self, id):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry(id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('entries', ['id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry(yang.adata.MNode):
    vpn_policy_id: str
    entries: ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries

    def __init__(self, vpn_policy_id: str, entries: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries_entry]=[]):
        self.vpn_policy_id = vpn_policy_id
        self.entries = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries(elements=entries)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.vpn_policy_id)])
        _vpn_policy_id = self.vpn_policy_id
        _entries = self.entries
        if _vpn_policy_id is not None:
            res.children['vpn-policy-id'] = yang.data.Leaf('vpn-policy-id', _vpn_policy_id)
        if _entries is not None:
            res.children['entries'] = self.entries.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry(vpn_policy_id=n.get_str("vpn-policy-id"), entries=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries.from_gdata(n.get_list("entries")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry(vpn_policy_id=yang.data.from_xml_str(n, "vpn-policy-id"), entries=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy__entries.from_xml(yang.data.get_xml_children(n, "entries")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry]
    def __init__(self, elements=[]):
        self._name = 'vpn-policy'
        self.elements = elements

    def create(self, vpn_policy_id):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry(vpn_policy_id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('vpn-policy', ['vpn-policy-id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies(yang.adata.MNode):
    vpn_policy: ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy

    def __init__(self, vpn_policy: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy_entry]=[]):
        self.vpn_policy = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy(elements=vpn_policy)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('vpn-policies')
        _vpn_policy = self.vpn_policy
        if _vpn_policy is not None:
            res.children['vpn-policy'] = self.vpn_policy.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies(vpn_policy=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy.from_gdata(n.get_list("vpn-policy")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies(vpn_policy=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies__vpn_policy.from_xml(yang.data.get_xml_children(n, "vpn-policy")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry(yang.adata.MNode):
    af: str
    maximum_routes: ?int

    def __init__(self, af: str, maximum_routes: ?int):
        self.af = af
        self.maximum_routes = maximum_routes

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.af)])
        _af = self.af
        _maximum_routes = self.maximum_routes
        if _af is not None:
            res.children['af'] = yang.data.Leaf('af', _af)
        if _maximum_routes is not None:
            res.children['maximum-routes'] = yang.data.Leaf('maximum-routes', _maximum_routes)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry(af=n.get_str("af"), maximum_routes=n.get_opt_int("maximum-routes"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry(af=yang.data.from_xml_str(n, "af"), maximum_routes=yang.data.from_xml_opt_int(n, "maximum-routes"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry]
    def __init__(self, elements=[]):
        self._name = 'address-family'
        self.elements = elements

    def create(self, af):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry(af)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('address-family', ['af'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes(yang.adata.MNode):
    address_family: ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family

    def __init__(self, address_family: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family_entry]=[]):
        self.address_family = ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family(elements=address_family)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('maximum-routes')
        _address_family = self.address_family
        if _address_family is not None:
            res.children['address-family'] = self.address_family.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes(address_family=ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family.from_gdata(n.get_list("address-family")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes(address_family=ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes__address_family.from_xml(yang.data.get_xml_children(n, "address-family")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('authentication')
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication()

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile(yang.adata.MNode):
    profile_name: ?str
    algorithm: ?str
    preshared_key: ?str

    def __init__(self, profile_name: ?str, algorithm: ?str, preshared_key: ?str):
        self.profile_name = profile_name
        self.algorithm = algorithm
        self.preshared_key = preshared_key

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('encryption-profile')
        _profile_name = self.profile_name
        _algorithm = self.algorithm
        _preshared_key = self.preshared_key
        if _profile_name is not None:
            res.children['profile-name'] = yang.data.Leaf('profile-name', _profile_name)
        if _algorithm is not None:
            res.children['algorithm'] = yang.data.Leaf('algorithm', _algorithm)
        if _preshared_key is not None:
            res.children['preshared-key'] = yang.data.Leaf('preshared-key', _preshared_key)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile(profile_name=n.get_opt_str("profile-name"), algorithm=n.get_opt_str("algorithm"), preshared_key=n.get_opt_str("preshared-key"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile(profile_name=yang.data.from_xml_opt_str(n, "profile-name"), algorithm=yang.data.from_xml_opt_str(n, "algorithm"), preshared_key=yang.data.from_xml_opt_str(n, "preshared-key"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption(yang.adata.MNode):
    enabled: ?bool
    layer: ?str
    encryption_profile: ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile

    def __init__(self, enabled: ?bool, layer: ?str, encryption_profile: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile):
        self.enabled = enabled
        self.layer = layer
        if encryption_profile is not None:
            self.encryption_profile = encryption_profile
        else:
            self.encryption_profile = ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('encryption')
        _enabled = self.enabled
        _layer = self.layer
        _encryption_profile = self.encryption_profile
        if _enabled is not None:
            res.children['enabled'] = yang.data.Leaf('enabled', _enabled)
        if _layer is not None:
            res.children['layer'] = yang.data.Leaf('layer', _layer)
        if _encryption_profile is not None:
            res.children['encryption-profile'] = self.encryption_profile.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption(enabled=n.get_opt_bool("enabled"), layer=n.get_opt_str("layer"), encryption_profile=ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile.from_gdata(n.get_container("encryption-profile")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption(enabled=yang.data.from_xml_opt_bool(n, "enabled"), layer=yang.data.from_xml_opt_str(n, "layer"), encryption_profile=ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption__encryption_profile.from_xml(yang.data.get_xml_child(n, "encryption-profile")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__security(yang.adata.MNode):
    authentication: ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication
    encryption: ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption

    def __init__(self, authentication: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication, encryption: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption):
        if authentication is not None:
            self.authentication = authentication
        else:
            self.authentication = ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication()
        if encryption is not None:
            self.encryption = encryption
        else:
            self.encryption = ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('security')
        _authentication = self.authentication
        _encryption = self.encryption
        if _authentication is not None:
            res.children['authentication'] = self.authentication.to_gdata()
        if _encryption is not None:
            res.children['encryption'] = self.encryption.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__security:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__security(authentication=ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication.from_gdata(n.get_container("authentication")), encryption=ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption.from_gdata(n.get_container("encryption")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__security:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__security(authentication=ietf_l3vpn_svc__l3vpn_svc__sites__site__security__authentication.from_xml(yang.data.get_xml_child(n, "authentication")), encryption=ietf_l3vpn_svc__l3vpn_svc__sites__site__security__encryption.from_xml(yang.data.get_xml_child(n, "encryption")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range(yang.adata.MNode):
    lower_port: ?int
    upper_port: ?int

    def __init__(self, lower_port: ?int, upper_port: ?int):
        self.lower_port = lower_port
        self.upper_port = upper_port

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('l4-src-port-range')
        _lower_port = self.lower_port
        _upper_port = self.upper_port
        if _lower_port is not None:
            res.children['lower-port'] = yang.data.Leaf('lower-port', _lower_port)
        if _upper_port is not None:
            res.children['upper-port'] = yang.data.Leaf('upper-port', _upper_port)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range(lower_port=n.get_opt_int("lower-port"), upper_port=n.get_opt_int("upper-port"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range(lower_port=yang.data.from_xml_opt_int(n, "lower-port"), upper_port=yang.data.from_xml_opt_int(n, "upper-port"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range(yang.adata.MNode):
    lower_port: ?int
    upper_port: ?int

    def __init__(self, lower_port: ?int, upper_port: ?int):
        self.lower_port = lower_port
        self.upper_port = upper_port

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('l4-dst-port-range')
        _lower_port = self.lower_port
        _upper_port = self.upper_port
        if _lower_port is not None:
            res.children['lower-port'] = yang.data.Leaf('lower-port', _lower_port)
        if _upper_port is not None:
            res.children['upper-port'] = yang.data.Leaf('upper-port', _upper_port)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range(lower_port=n.get_opt_int("lower-port"), upper_port=n.get_opt_int("upper-port"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range(lower_port=yang.data.from_xml_opt_int(n, "lower-port"), upper_port=yang.data.from_xml_opt_int(n, "upper-port"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow(yang.adata.MNode):
    dscp: ?int
    dot1p: ?int
    ipv4_src_prefix: ?str
    ipv6_src_prefix: ?str
    ipv4_dst_prefix: ?str
    ipv6_dst_prefix: ?str
    l4_src_port: ?int
    target_sites: list[str]
    l4_src_port_range: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range
    l4_dst_port: ?int
    l4_dst_port_range: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range
    protocol_field: ?value

    def __init__(self, dscp: ?int, dot1p: ?int, ipv4_src_prefix: ?str, ipv6_src_prefix: ?str, ipv4_dst_prefix: ?str, ipv6_dst_prefix: ?str, l4_src_port: ?int, target_sites: ?list[str]=None, l4_src_port_range: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range, l4_dst_port: ?int, l4_dst_port_range: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range, protocol_field: ?value):
        self.dscp = dscp
        self.dot1p = dot1p
        self.ipv4_src_prefix = ipv4_src_prefix
        self.ipv6_src_prefix = ipv6_src_prefix
        self.ipv4_dst_prefix = ipv4_dst_prefix
        self.ipv6_dst_prefix = ipv6_dst_prefix
        self.l4_src_port = l4_src_port
        if target_sites is not None:
            self.target_sites = target_sites
        else:
            self.target_sites = []
        if l4_src_port_range is not None:
            self.l4_src_port_range = l4_src_port_range
        else:
            self.l4_src_port_range = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range()
        self.l4_dst_port = l4_dst_port
        if l4_dst_port_range is not None:
            self.l4_dst_port_range = l4_dst_port_range
        else:
            self.l4_dst_port_range = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range()
        self.protocol_field = protocol_field

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('match-flow')
        _dscp = self.dscp
        _dot1p = self.dot1p
        _ipv4_src_prefix = self.ipv4_src_prefix
        _ipv6_src_prefix = self.ipv6_src_prefix
        _ipv4_dst_prefix = self.ipv4_dst_prefix
        _ipv6_dst_prefix = self.ipv6_dst_prefix
        _l4_src_port = self.l4_src_port
        _l4_src_port_range = self.l4_src_port_range
        _l4_dst_port = self.l4_dst_port
        _l4_dst_port_range = self.l4_dst_port_range
        _protocol_field = self.protocol_field
        if _dscp is not None:
            res.children['dscp'] = yang.data.Leaf('dscp', _dscp)
        if _dot1p is not None:
            res.children['dot1p'] = yang.data.Leaf('dot1p', _dot1p)
        if _ipv4_src_prefix is not None:
            res.children['ipv4-src-prefix'] = yang.data.Leaf('ipv4-src-prefix', _ipv4_src_prefix)
        if _ipv6_src_prefix is not None:
            res.children['ipv6-src-prefix'] = yang.data.Leaf('ipv6-src-prefix', _ipv6_src_prefix)
        if _ipv4_dst_prefix is not None:
            res.children['ipv4-dst-prefix'] = yang.data.Leaf('ipv4-dst-prefix', _ipv4_dst_prefix)
        if _ipv6_dst_prefix is not None:
            res.children['ipv6-dst-prefix'] = yang.data.Leaf('ipv6-dst-prefix', _ipv6_dst_prefix)
        if _l4_src_port is not None:
            res.children['l4-src-port'] = yang.data.Leaf('l4-src-port', _l4_src_port)
        res.children['target-sites'] = yang.data.LeafList('target-sites', self.target_sites)
        if _l4_src_port_range is not None:
            res.children['l4-src-port-range'] = self.l4_src_port_range.to_gdata()
        if _l4_dst_port is not None:
            res.children['l4-dst-port'] = yang.data.Leaf('l4-dst-port', _l4_dst_port)
        if _l4_dst_port_range is not None:
            res.children['l4-dst-port-range'] = self.l4_dst_port_range.to_gdata()
        if _protocol_field is not None:
            res.children['protocol-field'] = yang.data.Leaf('protocol-field', _protocol_field)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow(dscp=n.get_opt_int("dscp"), dot1p=n.get_opt_int("dot1p"), ipv4_src_prefix=n.get_opt_str("ipv4-src-prefix"), ipv6_src_prefix=n.get_opt_str("ipv6-src-prefix"), ipv4_dst_prefix=n.get_opt_str("ipv4-dst-prefix"), ipv6_dst_prefix=n.get_opt_str("ipv6-dst-prefix"), l4_src_port=n.get_opt_int("l4-src-port"), target_sites=n.get_opt_strs("target-sites"), l4_src_port_range=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range.from_gdata(n.get_container("l4-src-port-range")), l4_dst_port=n.get_opt_int("l4-dst-port"), l4_dst_port_range=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range.from_gdata(n.get_container("l4-dst-port-range")), protocol_field=n.get_opt_value("protocol-field"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow(dscp=yang.data.from_xml_opt_int(n, "dscp"), dot1p=yang.data.from_xml_opt_int(n, "dot1p"), ipv4_src_prefix=yang.data.from_xml_opt_str(n, "ipv4-src-prefix"), ipv6_src_prefix=yang.data.from_xml_opt_str(n, "ipv6-src-prefix"), ipv4_dst_prefix=yang.data.from_xml_opt_str(n, "ipv4-dst-prefix"), ipv6_dst_prefix=yang.data.from_xml_opt_str(n, "ipv6-dst-prefix"), l4_src_port=yang.data.from_xml_opt_int(n, "l4-src-port"), target_sites=yang.data.from_xml_opt_strs(n, "target-sites"), l4_src_port_range=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range.from_xml(yang.data.get_xml_child(n, "l4-src-port-range")), l4_dst_port=yang.data.from_xml_opt_int(n, "l4-dst-port"), l4_dst_port_range=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range.from_xml(yang.data.get_xml_child(n, "l4-dst-port-range")), protocol_field=yang.data.from_xml_opt_value(n, "protocol-field"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry(yang.adata.MNode):
    id: str
    match_flow: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow
    match_application: ?str
    target_class_id: ?str

    def __init__(self, id: str, match_flow: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow, match_application: ?str, target_class_id: ?str):
        self.id = id
        if match_flow is not None:
            self.match_flow = match_flow
        else:
            self.match_flow = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow()
        self.match_application = match_application
        self.target_class_id = target_class_id

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.id)])
        _id = self.id
        _match_flow = self.match_flow
        _match_application = self.match_application
        _target_class_id = self.target_class_id
        if _id is not None:
            res.children['id'] = yang.data.Leaf('id', _id)
        if _match_flow is not None:
            res.children['match-flow'] = self.match_flow.to_gdata()
        if _match_application is not None:
            res.children['match-application'] = yang.data.Leaf('match-application', _match_application)
        if _target_class_id is not None:
            res.children['target-class-id'] = yang.data.Leaf('target-class-id', _target_class_id)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry(id=n.get_str("id"), match_flow=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow.from_gdata(n.get_container("match-flow")), match_application=n.get_opt_str("match-application"), target_class_id=n.get_opt_str("target-class-id"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry(id=yang.data.from_xml_str(n, "id"), match_flow=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule__match_flow.from_xml(yang.data.get_xml_child(n, "match-flow")), match_application=yang.data.from_xml_opt_str(n, "match-application"), target_class_id=yang.data.from_xml_opt_str(n, "target-class-id"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry]
    def __init__(self, elements=[]):
        self._name = 'rule'
        self.elements = elements

    def create(self, id):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry(id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('rule', ['id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy(yang.adata.MNode):
    rule: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule

    def __init__(self, rule: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule_entry]=[]):
        self.rule = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule(elements=rule)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('qos-classification-policy')
        _rule = self.rule
        if _rule is not None:
            res.children['rule'] = self.rule.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy(rule=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule.from_gdata(n.get_list("rule")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy(rule=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy__rule.from_xml(yang.data.get_xml_children(n, "rule")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency(yang.adata.MNode):
    use_lowest_latency: ?bool
    latency_boundary: ?int

    def __init__(self, use_lowest_latency: ?bool, latency_boundary: ?int):
        self.use_lowest_latency = use_lowest_latency
        self.latency_boundary = latency_boundary

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('latency')
        _use_lowest_latency = self.use_lowest_latency
        _latency_boundary = self.latency_boundary
        if _use_lowest_latency is not None:
            res.children['use-lowest-latency'] = yang.data.Leaf('use-lowest-latency', _use_lowest_latency)
        if _latency_boundary is not None:
            res.children['latency-boundary'] = yang.data.Leaf('latency-boundary', _latency_boundary)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency(use_lowest_latency=n.get_opt_bool("use-lowest-latency"), latency_boundary=n.get_opt_int("latency-boundary"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency(use_lowest_latency=yang.data.from_xml_opt_bool(n, "use-lowest-latency"), latency_boundary=yang.data.from_xml_opt_int(n, "latency-boundary"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter(yang.adata.MNode):
    use_lowest_jitter: ?bool
    latency_boundary: ?int

    def __init__(self, use_lowest_jitter: ?bool, latency_boundary: ?int):
        self.use_lowest_jitter = use_lowest_jitter
        self.latency_boundary = latency_boundary

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('jitter')
        _use_lowest_jitter = self.use_lowest_jitter
        _latency_boundary = self.latency_boundary
        if _use_lowest_jitter is not None:
            res.children['use-lowest-jitter'] = yang.data.Leaf('use-lowest-jitter', _use_lowest_jitter)
        if _latency_boundary is not None:
            res.children['latency-boundary'] = yang.data.Leaf('latency-boundary', _latency_boundary)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter(use_lowest_jitter=n.get_opt_bool("use-lowest-jitter"), latency_boundary=n.get_opt_int("latency-boundary"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter(use_lowest_jitter=yang.data.from_xml_opt_bool(n, "use-lowest-jitter"), latency_boundary=yang.data.from_xml_opt_int(n, "latency-boundary"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth(yang.adata.MNode):
    guaranteed_bw_percent: ?float
    end_to_end: ?bool

    def __init__(self, guaranteed_bw_percent: ?float, end_to_end: ?bool):
        self.guaranteed_bw_percent = guaranteed_bw_percent
        self.end_to_end = end_to_end

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('bandwidth')
        _guaranteed_bw_percent = self.guaranteed_bw_percent
        _end_to_end = self.end_to_end
        if _guaranteed_bw_percent is not None:
            res.children['guaranteed-bw-percent'] = yang.data.Leaf('guaranteed-bw-percent', _guaranteed_bw_percent)
        if _end_to_end is not None:
            res.children['end-to-end'] = yang.data.Leaf('end-to-end', _end_to_end)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth(guaranteed_bw_percent=n.get_opt_float("guaranteed-bw-percent"), end_to_end=n.get_opt_bool("end-to-end"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth(guaranteed_bw_percent=yang.data.from_xml_opt_float(n, "guaranteed-bw-percent"), end_to_end=yang.data.from_xml_opt_bool(n, "end-to-end"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry(yang.adata.MNode):
    class_id: str
    direction: ?str
    rate_limit: ?float
    latency: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency
    jitter: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter
    bandwidth: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth

    def __init__(self, class_id: str, direction: ?str, rate_limit: ?float, latency: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency, jitter: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter, bandwidth: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth):
        self.class_id = class_id
        self.direction = direction
        self.rate_limit = rate_limit
        if latency is not None:
            self.latency = latency
        else:
            self.latency = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency()
        if jitter is not None:
            self.jitter = jitter
        else:
            self.jitter = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter()
        if bandwidth is not None:
            self.bandwidth = bandwidth
        else:
            self.bandwidth = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.class_id)])
        _class_id = self.class_id
        _direction = self.direction
        _rate_limit = self.rate_limit
        _latency = self.latency
        _jitter = self.jitter
        _bandwidth = self.bandwidth
        if _class_id is not None:
            res.children['class-id'] = yang.data.Leaf('class-id', _class_id)
        if _direction is not None:
            res.children['direction'] = yang.data.Leaf('direction', _direction)
        if _rate_limit is not None:
            res.children['rate-limit'] = yang.data.Leaf('rate-limit', _rate_limit)
        if _latency is not None:
            res.children['latency'] = self.latency.to_gdata()
        if _jitter is not None:
            res.children['jitter'] = self.jitter.to_gdata()
        if _bandwidth is not None:
            res.children['bandwidth'] = self.bandwidth.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry(class_id=n.get_str("class-id"), direction=n.get_opt_str("direction"), rate_limit=n.get_opt_float("rate-limit"), latency=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency.from_gdata(n.get_container("latency")), jitter=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter.from_gdata(n.get_container("jitter")), bandwidth=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth.from_gdata(n.get_container("bandwidth")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry(class_id=yang.data.from_xml_str(n, "class-id"), direction=yang.data.from_xml_opt_str(n, "direction"), rate_limit=yang.data.from_xml_opt_float(n, "rate-limit"), latency=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__latency.from_xml(yang.data.get_xml_child(n, "latency")), jitter=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__jitter.from_xml(yang.data.get_xml_child(n, "jitter")), bandwidth=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class__bandwidth.from_xml(yang.data.get_xml_child(n, "bandwidth")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry]
    def __init__(self, elements=[]):
        self._name = 'class'
        self.elements = elements

    def create(self, class_id):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry(class_id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('class', ['class-id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes(yang.adata.MNode):
    class_: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class

    def __init__(self, class_: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class_entry]=[]):
        self.class_ = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class(elements=class_)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('classes')
        _class_ = self.class_
        if _class_ is not None:
            res.children['class'] = self.class_.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes(class_=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class.from_gdata(n.get_list("class")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes(class_=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes__class.from_xml(yang.data.get_xml_children(n, "class")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile(yang.adata.MNode):
    profile: ?str
    classes: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes

    def __init__(self, profile: ?str, classes: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes):
        self.profile = profile
        if classes is not None:
            self.classes = classes
        else:
            self.classes = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('qos-profile')
        _profile = self.profile
        _classes = self.classes
        if _profile is not None:
            res.children['profile'] = yang.data.Leaf('profile', _profile)
        if _classes is not None:
            res.children['classes'] = self.classes.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile(profile=n.get_opt_str("profile"), classes=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes.from_gdata(n.get_container("classes")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile(profile=yang.data.from_xml_opt_str(n, "profile"), classes=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile__classes.from_xml(yang.data.get_xml_child(n, "classes")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos(yang.adata.MNode):
    qos_classification_policy: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy
    qos_profile: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile

    def __init__(self, qos_classification_policy: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy, qos_profile: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile):
        if qos_classification_policy is not None:
            self.qos_classification_policy = qos_classification_policy
        else:
            self.qos_classification_policy = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy()
        if qos_profile is not None:
            self.qos_profile = qos_profile
        else:
            self.qos_profile = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('qos')
        _qos_classification_policy = self.qos_classification_policy
        _qos_profile = self.qos_profile
        if _qos_classification_policy is not None:
            res.children['qos-classification-policy'] = self.qos_classification_policy.to_gdata()
        if _qos_profile is not None:
            res.children['qos-profile'] = self.qos_profile.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos(qos_classification_policy=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy.from_gdata(n.get_container("qos-classification-policy")), qos_profile=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile.from_gdata(n.get_container("qos-profile")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos(qos_classification_policy=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_classification_policy.from_xml(yang.data.get_xml_child(n, "qos-classification-policy")), qos_profile=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos__qos_profile.from_xml(yang.data.get_xml_child(n, "qos-profile")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier(yang.adata.MNode):
    signalling_type: ?str

    def __init__(self, signalling_type: ?str):
        self.signalling_type = signalling_type

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('carrierscarrier')
        _signalling_type = self.signalling_type
        if _signalling_type is not None:
            res.children['signalling-type'] = yang.data.Leaf('signalling-type', _signalling_type)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier(signalling_type=n.get_opt_str("signalling-type"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier(signalling_type=yang.data.from_xml_opt_str(n, "signalling-type"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family(yang.adata.MNode):
    ipv4: ?bool
    ipv6: ?bool

    def __init__(self, ipv4: ?bool, ipv6: ?bool):
        self.ipv4 = ipv4
        self.ipv6 = ipv6

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('multicast-address-family')
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            res.children['ipv4'] = yang.data.Leaf('ipv4', _ipv4)
        if _ipv6 is not None:
            res.children['ipv6'] = yang.data.Leaf('ipv6', _ipv6)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family(ipv4=n.get_opt_bool("ipv4"), ipv6=n.get_opt_bool("ipv6"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family(ipv4=yang.data.from_xml_opt_bool(n, "ipv4"), ipv6=yang.data.from_xml_opt_bool(n, "ipv6"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast(yang.adata.MNode):
    multicast_site_type: ?str
    multicast_address_family: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family
    protocol_type: ?str

    def __init__(self, multicast_site_type: ?str, multicast_address_family: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family, protocol_type: ?str):
        self.multicast_site_type = multicast_site_type
        if multicast_address_family is not None:
            self.multicast_address_family = multicast_address_family
        else:
            self.multicast_address_family = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family()
        self.protocol_type = protocol_type

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('multicast')
        _multicast_site_type = self.multicast_site_type
        _multicast_address_family = self.multicast_address_family
        _protocol_type = self.protocol_type
        if _multicast_site_type is not None:
            res.children['multicast-site-type'] = yang.data.Leaf('multicast-site-type', _multicast_site_type)
        if _multicast_address_family is not None:
            res.children['multicast-address-family'] = self.multicast_address_family.to_gdata()
        if _protocol_type is not None:
            res.children['protocol-type'] = yang.data.Leaf('protocol-type', _protocol_type)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast(multicast_site_type=n.get_opt_str("multicast-site-type"), multicast_address_family=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family.from_gdata(n.get_container("multicast-address-family")), protocol_type=n.get_opt_str("protocol-type"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast(multicast_site_type=yang.data.from_xml_opt_str(n, "multicast-site-type"), multicast_address_family=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast__multicast_address_family.from_xml(yang.data.get_xml_child(n, "multicast-address-family")), protocol_type=yang.data.from_xml_opt_str(n, "protocol-type"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__service(yang.adata.MNode):
    qos: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos
    carrierscarrier: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier
    multicast: ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast

    def __init__(self, qos: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos, carrierscarrier: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier, multicast: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast):
        if qos is not None:
            self.qos = qos
        else:
            self.qos = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos()
        if carrierscarrier is not None:
            self.carrierscarrier = carrierscarrier
        else:
            self.carrierscarrier = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier()
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('service')
        _qos = self.qos
        _carrierscarrier = self.carrierscarrier
        _multicast = self.multicast
        if _qos is not None:
            res.children['qos'] = self.qos.to_gdata()
        if _carrierscarrier is not None:
            res.children['carrierscarrier'] = self.carrierscarrier.to_gdata()
        if _multicast is not None:
            res.children['multicast'] = self.multicast.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service(qos=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos.from_gdata(n.get_container("qos")), carrierscarrier=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier.from_gdata(n.get_container("carrierscarrier")), multicast=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast.from_gdata(n.get_container("multicast")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__service:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__service(qos=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__qos.from_xml(yang.data.get_xml_child(n, "qos")), carrierscarrier=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__carrierscarrier.from_xml(yang.data.get_xml_child(n, "carrierscarrier")), multicast=ietf_l3vpn_svc__l3vpn_svc__sites__site__service__multicast.from_xml(yang.data.get_xml_child(n, "multicast")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection(yang.adata.MNode):
    enabled: ?bool

    def __init__(self, enabled: ?bool):
        self.enabled = enabled

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('traffic-protection')
        _enabled = self.enabled
        if _enabled is not None:
            res.children['enabled'] = yang.data.Leaf('enabled', _enabled)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection(enabled=n.get_opt_bool("enabled"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection(enabled=yang.data.from_xml_opt_bool(n, "enabled"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry(yang.adata.MNode):
    target_site: str
    metric: ?int

    def __init__(self, target_site: str, metric: ?int):
        self.target_site = target_site
        self.metric = metric

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.target_site)])
        _target_site = self.target_site
        _metric = self.metric
        if _target_site is not None:
            res.children['target-site'] = yang.data.Leaf('target-site', _target_site)
        if _metric is not None:
            res.children['metric'] = yang.data.Leaf('metric', _metric)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry(target_site=n.get_str("target-site"), metric=n.get_opt_int("metric"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry(target_site=yang.data.from_xml_str(n, "target-site"), metric=yang.data.from_xml_opt_int(n, "metric"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry]
    def __init__(self, elements=[]):
        self._name = 'sham-link'
        self.elements = elements

    def create(self, target_site):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry(target_site)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('sham-link', ['target-site'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links(yang.adata.MNode):
    sham_link: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link

    def __init__(self, sham_link: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry]=[]):
        self.sham_link = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link(elements=sham_link)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('sham-links')
        _sham_link = self.sham_link
        if _sham_link is not None:
            res.children['sham-link'] = self.sham_link.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links(sham_link=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link.from_gdata(n.get_list("sham-link")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links(sham_link=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links__sham_link.from_xml(yang.data.get_xml_children(n, "sham-link")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf(yang.adata.MNode):
    address_family: list[str]
    area_address: ?str
    metric: ?int
    sham_links: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links

    def __init__(self, address_family: ?list[str]=None, area_address: ?str, metric: ?int, sham_links: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links):
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = []
        self.area_address = area_address
        self.metric = metric
        if sham_links is not None:
            self.sham_links = sham_links
        else:
            self.sham_links = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('ospf')
        _area_address = self.area_address
        _metric = self.metric
        _sham_links = self.sham_links
        res.children['address-family'] = yang.data.LeafList('address-family', self.address_family)
        if _area_address is not None:
            res.children['area-address'] = yang.data.Leaf('area-address', _area_address)
        if _metric is not None:
            res.children['metric'] = yang.data.Leaf('metric', _metric)
        if _sham_links is not None:
            res.children['sham-links'] = self.sham_links.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf(address_family=n.get_opt_strs("address-family"), area_address=n.get_opt_str("area-address"), metric=n.get_opt_int("metric"), sham_links=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links.from_gdata(n.get_container("sham-links")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf(address_family=yang.data.from_xml_opt_strs(n, "address-family"), area_address=yang.data.from_xml_opt_str(n, "area-address"), metric=yang.data.from_xml_opt_int(n, "metric"), sham_links=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf__sham_links.from_xml(yang.data.get_xml_child(n, "sham-links")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp(yang.adata.MNode):
    autonomous_system: ?int
    address_family: list[str]

    def __init__(self, autonomous_system: ?int, address_family: ?list[str]=None):
        self.autonomous_system = autonomous_system
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = []

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('bgp')
        _autonomous_system = self.autonomous_system
        if _autonomous_system is not None:
            res.children['autonomous-system'] = yang.data.Leaf('autonomous-system', _autonomous_system)
        res.children['address-family'] = yang.data.LeafList('address-family', self.address_family)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp(autonomous_system=n.get_opt_int("autonomous-system"), address_family=n.get_opt_strs("address-family"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp(autonomous_system=yang.data.from_xml_opt_int(n, "autonomous-system"), address_family=yang.data.from_xml_opt_strs(n, "address-family"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry(yang.adata.MNode):
    lan: str
    next_hop: str
    lan_tag: ?str

    def __init__(self, lan: str, next_hop: str, lan_tag: ?str):
        self.lan = lan
        self.next_hop = next_hop
        self.lan_tag = lan_tag

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.lan), str(self.next_hop)])
        _lan = self.lan
        _next_hop = self.next_hop
        _lan_tag = self.lan_tag
        if _lan is not None:
            res.children['lan'] = yang.data.Leaf('lan', _lan)
        if _next_hop is not None:
            res.children['next-hop'] = yang.data.Leaf('next-hop', _next_hop)
        if _lan_tag is not None:
            res.children['lan-tag'] = yang.data.Leaf('lan-tag', _lan_tag)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry(lan=n.get_str("lan"), next_hop=n.get_str("next-hop"), lan_tag=n.get_opt_str("lan-tag"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry(lan=yang.data.from_xml_str(n, "lan"), next_hop=yang.data.from_xml_str(n, "next-hop"), lan_tag=yang.data.from_xml_opt_str(n, "lan-tag"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry]
    def __init__(self, elements=[]):
        self._name = 'ipv4-lan-prefixes'
        self.elements = elements

    def create(self, lan, next_hop):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry(lan, next_hop)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('ipv4-lan-prefixes', ['lan', 'next-hop'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry(yang.adata.MNode):
    lan: str
    next_hop: str
    lan_tag: ?str

    def __init__(self, lan: str, next_hop: str, lan_tag: ?str):
        self.lan = lan
        self.next_hop = next_hop
        self.lan_tag = lan_tag

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.lan), str(self.next_hop)])
        _lan = self.lan
        _next_hop = self.next_hop
        _lan_tag = self.lan_tag
        if _lan is not None:
            res.children['lan'] = yang.data.Leaf('lan', _lan)
        if _next_hop is not None:
            res.children['next-hop'] = yang.data.Leaf('next-hop', _next_hop)
        if _lan_tag is not None:
            res.children['lan-tag'] = yang.data.Leaf('lan-tag', _lan_tag)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry(lan=n.get_str("lan"), next_hop=n.get_str("next-hop"), lan_tag=n.get_opt_str("lan-tag"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry(lan=yang.data.from_xml_str(n, "lan"), next_hop=yang.data.from_xml_str(n, "next-hop"), lan_tag=yang.data.from_xml_opt_str(n, "lan-tag"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry]
    def __init__(self, elements=[]):
        self._name = 'ipv6-lan-prefixes'
        self.elements = elements

    def create(self, lan, next_hop):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry(lan, next_hop)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('ipv6-lan-prefixes', ['lan', 'next-hop'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes(yang.adata.MNode):
    ipv4_lan_prefixes: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes
    ipv6_lan_prefixes: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes

    def __init__(self, ipv4_lan_prefixes: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry]=[], ipv6_lan_prefixes: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry]=[]):
        self.ipv4_lan_prefixes = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes(elements=ipv4_lan_prefixes)
        self.ipv6_lan_prefixes = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes(elements=ipv6_lan_prefixes)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('cascaded-lan-prefixes')
        _ipv4_lan_prefixes = self.ipv4_lan_prefixes
        _ipv6_lan_prefixes = self.ipv6_lan_prefixes
        if _ipv4_lan_prefixes is not None:
            res.children['ipv4-lan-prefixes'] = self.ipv4_lan_prefixes.to_gdata()
        if _ipv6_lan_prefixes is not None:
            res.children['ipv6-lan-prefixes'] = self.ipv6_lan_prefixes.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes(ipv4_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes.from_gdata(n.get_list("ipv4-lan-prefixes")), ipv6_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes.from_gdata(n.get_list("ipv6-lan-prefixes")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes(ipv4_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes.from_xml(yang.data.get_xml_children(n, "ipv4-lan-prefixes")), ipv6_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes.from_xml(yang.data.get_xml_children(n, "ipv6-lan-prefixes")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static(yang.adata.MNode):
    cascaded_lan_prefixes: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes

    def __init__(self, cascaded_lan_prefixes: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes):
        if cascaded_lan_prefixes is not None:
            self.cascaded_lan_prefixes = cascaded_lan_prefixes
        else:
            self.cascaded_lan_prefixes = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('static')
        _cascaded_lan_prefixes = self.cascaded_lan_prefixes
        if _cascaded_lan_prefixes is not None:
            res.children['cascaded-lan-prefixes'] = self.cascaded_lan_prefixes.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static(cascaded_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes.from_gdata(n.get_container("cascaded-lan-prefixes")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static(cascaded_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static__cascaded_lan_prefixes.from_xml(yang.data.get_xml_child(n, "cascaded-lan-prefixes")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip(yang.adata.MNode):
    address_family: list[str]

    def __init__(self, address_family: ?list[str]=None):
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = []

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('rip')
        res.children['address-family'] = yang.data.LeafList('address-family', self.address_family)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip(address_family=n.get_opt_strs("address-family"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip(address_family=yang.data.from_xml_opt_strs(n, "address-family"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp(yang.adata.MNode):
    address_family: list[str]

    def __init__(self, address_family: ?list[str]=None):
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = []

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('vrrp')
        res.children['address-family'] = yang.data.LeafList('address-family', self.address_family)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp(address_family=n.get_opt_strs("address-family"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp(address_family=yang.data.from_xml_opt_strs(n, "address-family"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry(yang.adata.MNode):
    type: str
    ospf: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf
    bgp: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp
    static: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static
    rip: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip
    vrrp: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp

    def __init__(self, type: str, ospf: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf, bgp: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp, static: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static, rip: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip, vrrp: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp):
        self.type = type
        if ospf is not None:
            self.ospf = ospf
        else:
            self.ospf = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf()
        if bgp is not None:
            self.bgp = bgp
        else:
            self.bgp = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp()
        if static is not None:
            self.static = static
        else:
            self.static = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static()
        if rip is not None:
            self.rip = rip
        else:
            self.rip = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip()
        if vrrp is not None:
            self.vrrp = vrrp
        else:
            self.vrrp = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.type)])
        _type = self.type
        _ospf = self.ospf
        _bgp = self.bgp
        _static = self.static
        _rip = self.rip
        _vrrp = self.vrrp
        if _type is not None:
            res.children['type'] = yang.data.Leaf('type', _type)
        if _ospf is not None:
            res.children['ospf'] = self.ospf.to_gdata()
        if _bgp is not None:
            res.children['bgp'] = self.bgp.to_gdata()
        if _static is not None:
            res.children['static'] = self.static.to_gdata()
        if _rip is not None:
            res.children['rip'] = self.rip.to_gdata()
        if _vrrp is not None:
            res.children['vrrp'] = self.vrrp.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry(type=n.get_str("type"), ospf=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf.from_gdata(n.get_container("ospf")), bgp=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp.from_gdata(n.get_container("bgp")), static=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static.from_gdata(n.get_container("static")), rip=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip.from_gdata(n.get_container("rip")), vrrp=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp.from_gdata(n.get_container("vrrp")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry(type=yang.data.from_xml_str(n, "type"), ospf=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__ospf.from_xml(yang.data.get_xml_child(n, "ospf")), bgp=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__bgp.from_xml(yang.data.get_xml_child(n, "bgp")), static=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__static.from_xml(yang.data.get_xml_child(n, "static")), rip=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__rip.from_xml(yang.data.get_xml_child(n, "rip")), vrrp=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol__vrrp.from_xml(yang.data.get_xml_child(n, "vrrp")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry]
    def __init__(self, elements=[]):
        self._name = 'routing-protocol'
        self.elements = elements

    def create(self, type):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry(type)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('routing-protocol', ['type'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols(yang.adata.MNode):
    routing_protocol: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol

    def __init__(self, routing_protocol: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol_entry]=[]):
        self.routing_protocol = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol(elements=routing_protocol)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('routing-protocols')
        _routing_protocol = self.routing_protocol
        if _routing_protocol is not None:
            res.children['routing-protocol'] = self.routing_protocol.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols(routing_protocol=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol.from_gdata(n.get_list("routing-protocol")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols(routing_protocol=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols__routing_protocol.from_xml(yang.data.get_xml_children(n, "routing-protocol")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry(yang.adata.MNode):
    group_id: str

    def __init__(self, group_id: str):
        self.group_id = group_id

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.group_id)])
        _group_id = self.group_id
        if _group_id is not None:
            res.children['group-id'] = yang.data.Leaf('group-id', _group_id)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry(group_id=n.get_str("group-id"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry(group_id=yang.data.from_xml_str(n, "group-id"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry]
    def __init__(self, elements=[]):
        self._name = 'group'
        self.elements = elements

    def create(self, group_id):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry(group_id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('group', ['group-id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups(yang.adata.MNode):
    group: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group

    def __init__(self, group: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group_entry]=[]):
        self.group = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group(elements=group)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('groups')
        _group = self.group
        if _group is not None:
            res.children['group'] = self.group.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups(group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group.from_gdata(n.get_list("group")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups(group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups__group.from_xml(yang.data.get_xml_children(n, "group")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry(yang.adata.MNode):
    group_id: str

    def __init__(self, group_id: str):
        self.group_id = group_id

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.group_id)])
        _group_id = self.group_id
        if _group_id is not None:
            res.children['group-id'] = yang.data.Leaf('group-id', _group_id)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry(group_id=n.get_str("group-id"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry(group_id=yang.data.from_xml_str(n, "group-id"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry]
    def __init__(self, elements=[]):
        self._name = 'group'
        self.elements = elements

    def create(self, group_id):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry(group_id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('group', ['group-id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target(yang.adata.MNode):
    group: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group
    all_other_accesses: ?bool
    all_other_groups: ?bool

    def __init__(self, group: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group_entry]=[], all_other_accesses: ?bool, all_other_groups: ?bool):
        self.group = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group(elements=group)
        self.all_other_accesses = all_other_accesses
        self.all_other_groups = all_other_groups

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('target')
        _group = self.group
        _all_other_accesses = self.all_other_accesses
        _all_other_groups = self.all_other_groups
        if _group is not None:
            res.children['group'] = self.group.to_gdata()
        if _all_other_accesses is not None:
            res.children['all-other-accesses'] = yang.data.Leaf('all-other-accesses', _all_other_accesses)
        if _all_other_groups is not None:
            res.children['all-other-groups'] = yang.data.Leaf('all-other-groups', _all_other_groups)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target(group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group.from_gdata(n.get_list("group")), all_other_accesses=n.get_opt_bool("all-other-accesses"), all_other_groups=n.get_opt_bool("all-other-groups"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target(group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target__group.from_xml(yang.data.get_xml_children(n, "group")), all_other_accesses=yang.data.from_xml_opt_bool(n, "all-other-accesses"), all_other_groups=yang.data.from_xml_opt_bool(n, "all-other-groups"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry(yang.adata.MNode):
    constraint_type: str
    target: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target

    def __init__(self, constraint_type: str, target: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target):
        self.constraint_type = constraint_type
        if target is not None:
            self.target = target
        else:
            self.target = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.constraint_type)])
        _constraint_type = self.constraint_type
        _target = self.target
        if _constraint_type is not None:
            res.children['constraint-type'] = yang.data.Leaf('constraint-type', _constraint_type)
        if _target is not None:
            res.children['target'] = self.target.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry(constraint_type=n.get_str("constraint-type"), target=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target.from_gdata(n.get_container("target")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry(constraint_type=yang.data.from_xml_str(n, "constraint-type"), target=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint__target.from_xml(yang.data.get_xml_child(n, "target")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry]
    def __init__(self, elements=[]):
        self._name = 'constraint'
        self.elements = elements

    def create(self, constraint_type):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry(constraint_type)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('constraint', ['constraint-type'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints(yang.adata.MNode):
    constraint: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint

    def __init__(self, constraint: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint_entry]=[]):
        self.constraint = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint(elements=constraint)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('constraints')
        _constraint = self.constraint
        if _constraint is not None:
            res.children['constraint'] = self.constraint.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints(constraint=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint.from_gdata(n.get_list("constraint")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints(constraint=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints__constraint.from_xml(yang.data.get_xml_children(n, "constraint")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity(yang.adata.MNode):
    groups: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups
    constraints: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints

    def __init__(self, groups: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups, constraints: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints):
        if groups is not None:
            self.groups = groups
        else:
            self.groups = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups()
        if constraints is not None:
            self.constraints = constraints
        else:
            self.constraints = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('access-diversity')
        _groups = self.groups
        _constraints = self.constraints
        if _groups is not None:
            res.children['groups'] = self.groups.to_gdata()
        if _constraints is not None:
            res.children['constraints'] = self.constraints.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity(groups=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups.from_gdata(n.get_container("groups")), constraints=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints.from_gdata(n.get_container("constraints")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity(groups=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__groups.from_xml(yang.data.get_xml_child(n, "groups")), constraints=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity__constraints.from_xml(yang.data.get_xml_child(n, "constraints")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type(yang.adata.MNode):
    requested_type: ?str
    strict: ?bool

    def __init__(self, requested_type: ?str, strict: ?bool):
        self.requested_type = requested_type
        self.strict = strict

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('requested-type')
        _requested_type = self.requested_type
        _strict = self.strict
        if _requested_type is not None:
            res.children['requested-type'] = yang.data.Leaf('requested-type', _requested_type)
        if _strict is not None:
            res.children['strict'] = yang.data.Leaf('strict', _strict)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type(requested_type=n.get_opt_str("requested-type"), strict=n.get_opt_bool("strict"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type(requested_type=yang.data.from_xml_opt_str(n, "requested-type"), strict=yang.data.from_xml_opt_bool(n, "strict"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer(yang.adata.MNode):
    requested_type: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type
    always_on: ?bool
    bearer_reference: ?str

    def __init__(self, requested_type: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type, always_on: ?bool, bearer_reference: ?str):
        if requested_type is not None:
            self.requested_type = requested_type
        else:
            self.requested_type = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type()
        self.always_on = always_on
        self.bearer_reference = bearer_reference

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('bearer')
        _requested_type = self.requested_type
        _always_on = self.always_on
        _bearer_reference = self.bearer_reference
        if _requested_type is not None:
            res.children['requested-type'] = self.requested_type.to_gdata()
        if _always_on is not None:
            res.children['always-on'] = yang.data.Leaf('always-on', _always_on)
        if _bearer_reference is not None:
            res.children['bearer-reference'] = yang.data.Leaf('bearer-reference', _bearer_reference)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer(requested_type=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type.from_gdata(n.get_container("requested-type")), always_on=n.get_opt_bool("always-on"), bearer_reference=n.get_opt_str("bearer-reference"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer(requested_type=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer__requested_type.from_xml(yang.data.get_xml_child(n, "requested-type")), always_on=yang.data.from_xml_opt_bool(n, "always-on"), bearer_reference=yang.data.from_xml_opt_str(n, "bearer-reference"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry(yang.adata.MNode):
    group_id: str
    start_address: ?str
    end_address: ?str

    def __init__(self, group_id: str, start_address: ?str, end_address: ?str):
        self.group_id = group_id
        self.start_address = start_address
        self.end_address = end_address

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.group_id)])
        _group_id = self.group_id
        _start_address = self.start_address
        _end_address = self.end_address
        if _group_id is not None:
            res.children['group-id'] = yang.data.Leaf('group-id', _group_id)
        if _start_address is not None:
            res.children['start-address'] = yang.data.Leaf('start-address', _start_address)
        if _end_address is not None:
            res.children['end-address'] = yang.data.Leaf('end-address', _end_address)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry(group_id=n.get_str("group-id"), start_address=n.get_opt_str("start-address"), end_address=n.get_opt_str("end-address"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry(group_id=yang.data.from_xml_str(n, "group-id"), start_address=yang.data.from_xml_opt_str(n, "start-address"), end_address=yang.data.from_xml_opt_str(n, "end-address"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry]
    def __init__(self, elements=[]):
        self._name = 'address-group'
        self.elements = elements

    def create(self, group_id):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry(group_id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('address-group', ['group-id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses(yang.adata.MNode):
    address_group: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group

    def __init__(self, address_group: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group_entry]=[]):
        self.address_group = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group(elements=address_group)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('customer-addresses')
        _address_group = self.address_group
        if _address_group is not None:
            res.children['address-group'] = self.address_group.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses(address_group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group.from_gdata(n.get_list("address-group")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses(address_group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses__address_group.from_xml(yang.data.get_xml_children(n, "address-group")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp(yang.adata.MNode):
    provider_address: ?str
    prefix_length: ?int
    number_of_dynamic_address: ?int
    customer_addresses: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses

    def __init__(self, provider_address: ?str, prefix_length: ?int, number_of_dynamic_address: ?int, customer_addresses: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses):
        self.provider_address = provider_address
        self.prefix_length = prefix_length
        self.number_of_dynamic_address = number_of_dynamic_address
        if customer_addresses is not None:
            self.customer_addresses = customer_addresses
        else:
            self.customer_addresses = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('provider-dhcp')
        _provider_address = self.provider_address
        _prefix_length = self.prefix_length
        _number_of_dynamic_address = self.number_of_dynamic_address
        _customer_addresses = self.customer_addresses
        if _provider_address is not None:
            res.children['provider-address'] = yang.data.Leaf('provider-address', _provider_address)
        if _prefix_length is not None:
            res.children['prefix-length'] = yang.data.Leaf('prefix-length', _prefix_length)
        if _number_of_dynamic_address is not None:
            res.children['number-of-dynamic-address'] = yang.data.Leaf('number-of-dynamic-address', _number_of_dynamic_address)
        if _customer_addresses is not None:
            res.children['customer-addresses'] = self.customer_addresses.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp(provider_address=n.get_opt_str("provider-address"), prefix_length=n.get_opt_int("prefix-length"), number_of_dynamic_address=n.get_opt_int("number-of-dynamic-address"), customer_addresses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses.from_gdata(n.get_container("customer-addresses")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp(provider_address=yang.data.from_xml_opt_str(n, "provider-address"), prefix_length=yang.data.from_xml_opt_int(n, "prefix-length"), number_of_dynamic_address=yang.data.from_xml_opt_int(n, "number-of-dynamic-address"), customer_addresses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp__customer_addresses.from_xml(yang.data.get_xml_child(n, "customer-addresses")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers(yang.adata.MNode):
    server_ip_address: list[str]

    def __init__(self, server_ip_address: ?list[str]=None):
        if server_ip_address is not None:
            self.server_ip_address = server_ip_address
        else:
            self.server_ip_address = []

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('customer-dhcp-servers')
        res.children['server-ip-address'] = yang.data.LeafList('server-ip-address', self.server_ip_address)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers(server_ip_address=n.get_opt_strs("server-ip-address"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers(server_ip_address=yang.data.from_xml_opt_strs(n, "server-ip-address"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay(yang.adata.MNode):
    provider_address: ?str
    prefix_length: ?int
    customer_dhcp_servers: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers

    def __init__(self, provider_address: ?str, prefix_length: ?int, customer_dhcp_servers: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers):
        self.provider_address = provider_address
        self.prefix_length = prefix_length
        if customer_dhcp_servers is not None:
            self.customer_dhcp_servers = customer_dhcp_servers
        else:
            self.customer_dhcp_servers = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('dhcp-relay')
        _provider_address = self.provider_address
        _prefix_length = self.prefix_length
        _customer_dhcp_servers = self.customer_dhcp_servers
        if _provider_address is not None:
            res.children['provider-address'] = yang.data.Leaf('provider-address', _provider_address)
        if _prefix_length is not None:
            res.children['prefix-length'] = yang.data.Leaf('prefix-length', _prefix_length)
        if _customer_dhcp_servers is not None:
            res.children['customer-dhcp-servers'] = self.customer_dhcp_servers.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay(provider_address=n.get_opt_str("provider-address"), prefix_length=n.get_opt_int("prefix-length"), customer_dhcp_servers=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers.from_gdata(n.get_container("customer-dhcp-servers")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay(provider_address=yang.data.from_xml_opt_str(n, "provider-address"), prefix_length=yang.data.from_xml_opt_int(n, "prefix-length"), customer_dhcp_servers=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay__customer_dhcp_servers.from_xml(yang.data.get_xml_child(n, "customer-dhcp-servers")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses(yang.adata.MNode):
    provider_address: ?str
    customer_address: ?str
    prefix_length: ?int

    def __init__(self, provider_address: ?str, customer_address: ?str, prefix_length: ?int):
        self.provider_address = provider_address
        self.customer_address = customer_address
        self.prefix_length = prefix_length

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('addresses')
        _provider_address = self.provider_address
        _customer_address = self.customer_address
        _prefix_length = self.prefix_length
        if _provider_address is not None:
            res.children['provider-address'] = yang.data.Leaf('provider-address', _provider_address)
        if _customer_address is not None:
            res.children['customer-address'] = yang.data.Leaf('customer-address', _customer_address)
        if _prefix_length is not None:
            res.children['prefix-length'] = yang.data.Leaf('prefix-length', _prefix_length)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses(provider_address=n.get_opt_str("provider-address"), customer_address=n.get_opt_str("customer-address"), prefix_length=n.get_opt_int("prefix-length"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses(provider_address=yang.data.from_xml_opt_str(n, "provider-address"), customer_address=yang.data.from_xml_opt_str(n, "customer-address"), prefix_length=yang.data.from_xml_opt_int(n, "prefix-length"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4(yang.adata.MNode):
    address_allocation_type: ?str
    provider_dhcp: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp
    dhcp_relay: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay
    addresses: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses

    def __init__(self, address_allocation_type: ?str, provider_dhcp: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp, dhcp_relay: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay, addresses: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses):
        self.address_allocation_type = address_allocation_type
        if provider_dhcp is not None:
            self.provider_dhcp = provider_dhcp
        else:
            self.provider_dhcp = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp()
        if dhcp_relay is not None:
            self.dhcp_relay = dhcp_relay
        else:
            self.dhcp_relay = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay()
        if addresses is not None:
            self.addresses = addresses
        else:
            self.addresses = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('ipv4')
        _address_allocation_type = self.address_allocation_type
        _provider_dhcp = self.provider_dhcp
        _dhcp_relay = self.dhcp_relay
        _addresses = self.addresses
        if _address_allocation_type is not None:
            res.children['address-allocation-type'] = yang.data.Leaf('address-allocation-type', _address_allocation_type)
        if _provider_dhcp is not None:
            res.children['provider-dhcp'] = self.provider_dhcp.to_gdata()
        if _dhcp_relay is not None:
            res.children['dhcp-relay'] = self.dhcp_relay.to_gdata()
        if _addresses is not None:
            res.children['addresses'] = self.addresses.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4(address_allocation_type=n.get_opt_str("address-allocation-type"), provider_dhcp=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp.from_gdata(n.get_container("provider-dhcp")), dhcp_relay=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay.from_gdata(n.get_container("dhcp-relay")), addresses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses.from_gdata(n.get_container("addresses")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4(address_allocation_type=yang.data.from_xml_opt_str(n, "address-allocation-type"), provider_dhcp=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__provider_dhcp.from_xml(yang.data.get_xml_child(n, "provider-dhcp")), dhcp_relay=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__dhcp_relay.from_xml(yang.data.get_xml_child(n, "dhcp-relay")), addresses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4__addresses.from_xml(yang.data.get_xml_child(n, "addresses")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry(yang.adata.MNode):
    group_id: str
    start_address: ?str
    end_address: ?str

    def __init__(self, group_id: str, start_address: ?str, end_address: ?str):
        self.group_id = group_id
        self.start_address = start_address
        self.end_address = end_address

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.group_id)])
        _group_id = self.group_id
        _start_address = self.start_address
        _end_address = self.end_address
        if _group_id is not None:
            res.children['group-id'] = yang.data.Leaf('group-id', _group_id)
        if _start_address is not None:
            res.children['start-address'] = yang.data.Leaf('start-address', _start_address)
        if _end_address is not None:
            res.children['end-address'] = yang.data.Leaf('end-address', _end_address)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry(group_id=n.get_str("group-id"), start_address=n.get_opt_str("start-address"), end_address=n.get_opt_str("end-address"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry(group_id=yang.data.from_xml_str(n, "group-id"), start_address=yang.data.from_xml_opt_str(n, "start-address"), end_address=yang.data.from_xml_opt_str(n, "end-address"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry]
    def __init__(self, elements=[]):
        self._name = 'address-group'
        self.elements = elements

    def create(self, group_id):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry(group_id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('address-group', ['group-id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses(yang.adata.MNode):
    address_group: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group

    def __init__(self, address_group: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group_entry]=[]):
        self.address_group = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group(elements=address_group)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('customer-addresses')
        _address_group = self.address_group
        if _address_group is not None:
            res.children['address-group'] = self.address_group.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses(address_group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group.from_gdata(n.get_list("address-group")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses(address_group=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses__address_group.from_xml(yang.data.get_xml_children(n, "address-group")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp(yang.adata.MNode):
    provider_address: ?str
    prefix_length: ?int
    number_of_dynamic_address: ?int
    customer_addresses: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses

    def __init__(self, provider_address: ?str, prefix_length: ?int, number_of_dynamic_address: ?int, customer_addresses: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses):
        self.provider_address = provider_address
        self.prefix_length = prefix_length
        self.number_of_dynamic_address = number_of_dynamic_address
        if customer_addresses is not None:
            self.customer_addresses = customer_addresses
        else:
            self.customer_addresses = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('provider-dhcp')
        _provider_address = self.provider_address
        _prefix_length = self.prefix_length
        _number_of_dynamic_address = self.number_of_dynamic_address
        _customer_addresses = self.customer_addresses
        if _provider_address is not None:
            res.children['provider-address'] = yang.data.Leaf('provider-address', _provider_address)
        if _prefix_length is not None:
            res.children['prefix-length'] = yang.data.Leaf('prefix-length', _prefix_length)
        if _number_of_dynamic_address is not None:
            res.children['number-of-dynamic-address'] = yang.data.Leaf('number-of-dynamic-address', _number_of_dynamic_address)
        if _customer_addresses is not None:
            res.children['customer-addresses'] = self.customer_addresses.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp(provider_address=n.get_opt_str("provider-address"), prefix_length=n.get_opt_int("prefix-length"), number_of_dynamic_address=n.get_opt_int("number-of-dynamic-address"), customer_addresses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses.from_gdata(n.get_container("customer-addresses")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp(provider_address=yang.data.from_xml_opt_str(n, "provider-address"), prefix_length=yang.data.from_xml_opt_int(n, "prefix-length"), number_of_dynamic_address=yang.data.from_xml_opt_int(n, "number-of-dynamic-address"), customer_addresses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp__customer_addresses.from_xml(yang.data.get_xml_child(n, "customer-addresses")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers(yang.adata.MNode):
    server_ip_address: list[str]

    def __init__(self, server_ip_address: ?list[str]=None):
        if server_ip_address is not None:
            self.server_ip_address = server_ip_address
        else:
            self.server_ip_address = []

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('customer-dhcp-servers')
        res.children['server-ip-address'] = yang.data.LeafList('server-ip-address', self.server_ip_address)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers(server_ip_address=n.get_opt_strs("server-ip-address"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers(server_ip_address=yang.data.from_xml_opt_strs(n, "server-ip-address"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay(yang.adata.MNode):
    provider_address: ?str
    prefix_length: ?int
    customer_dhcp_servers: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers

    def __init__(self, provider_address: ?str, prefix_length: ?int, customer_dhcp_servers: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers):
        self.provider_address = provider_address
        self.prefix_length = prefix_length
        if customer_dhcp_servers is not None:
            self.customer_dhcp_servers = customer_dhcp_servers
        else:
            self.customer_dhcp_servers = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('dhcp-relay')
        _provider_address = self.provider_address
        _prefix_length = self.prefix_length
        _customer_dhcp_servers = self.customer_dhcp_servers
        if _provider_address is not None:
            res.children['provider-address'] = yang.data.Leaf('provider-address', _provider_address)
        if _prefix_length is not None:
            res.children['prefix-length'] = yang.data.Leaf('prefix-length', _prefix_length)
        if _customer_dhcp_servers is not None:
            res.children['customer-dhcp-servers'] = self.customer_dhcp_servers.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay(provider_address=n.get_opt_str("provider-address"), prefix_length=n.get_opt_int("prefix-length"), customer_dhcp_servers=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers.from_gdata(n.get_container("customer-dhcp-servers")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay(provider_address=yang.data.from_xml_opt_str(n, "provider-address"), prefix_length=yang.data.from_xml_opt_int(n, "prefix-length"), customer_dhcp_servers=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay__customer_dhcp_servers.from_xml(yang.data.get_xml_child(n, "customer-dhcp-servers")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses(yang.adata.MNode):
    provider_address: ?str
    customer_address: ?str
    prefix_length: ?int

    def __init__(self, provider_address: ?str, customer_address: ?str, prefix_length: ?int):
        self.provider_address = provider_address
        self.customer_address = customer_address
        self.prefix_length = prefix_length

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('addresses')
        _provider_address = self.provider_address
        _customer_address = self.customer_address
        _prefix_length = self.prefix_length
        if _provider_address is not None:
            res.children['provider-address'] = yang.data.Leaf('provider-address', _provider_address)
        if _customer_address is not None:
            res.children['customer-address'] = yang.data.Leaf('customer-address', _customer_address)
        if _prefix_length is not None:
            res.children['prefix-length'] = yang.data.Leaf('prefix-length', _prefix_length)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses(provider_address=n.get_opt_str("provider-address"), customer_address=n.get_opt_str("customer-address"), prefix_length=n.get_opt_int("prefix-length"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses(provider_address=yang.data.from_xml_opt_str(n, "provider-address"), customer_address=yang.data.from_xml_opt_str(n, "customer-address"), prefix_length=yang.data.from_xml_opt_int(n, "prefix-length"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6(yang.adata.MNode):
    address_allocation_type: ?str
    provider_dhcp: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp
    dhcp_relay: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay
    addresses: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses

    def __init__(self, address_allocation_type: ?str, provider_dhcp: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp, dhcp_relay: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay, addresses: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses):
        self.address_allocation_type = address_allocation_type
        if provider_dhcp is not None:
            self.provider_dhcp = provider_dhcp
        else:
            self.provider_dhcp = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp()
        if dhcp_relay is not None:
            self.dhcp_relay = dhcp_relay
        else:
            self.dhcp_relay = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay()
        if addresses is not None:
            self.addresses = addresses
        else:
            self.addresses = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('ipv6')
        _address_allocation_type = self.address_allocation_type
        _provider_dhcp = self.provider_dhcp
        _dhcp_relay = self.dhcp_relay
        _addresses = self.addresses
        if _address_allocation_type is not None:
            res.children['address-allocation-type'] = yang.data.Leaf('address-allocation-type', _address_allocation_type)
        if _provider_dhcp is not None:
            res.children['provider-dhcp'] = self.provider_dhcp.to_gdata()
        if _dhcp_relay is not None:
            res.children['dhcp-relay'] = self.dhcp_relay.to_gdata()
        if _addresses is not None:
            res.children['addresses'] = self.addresses.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6(address_allocation_type=n.get_opt_str("address-allocation-type"), provider_dhcp=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp.from_gdata(n.get_container("provider-dhcp")), dhcp_relay=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay.from_gdata(n.get_container("dhcp-relay")), addresses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses.from_gdata(n.get_container("addresses")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6(address_allocation_type=yang.data.from_xml_opt_str(n, "address-allocation-type"), provider_dhcp=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__provider_dhcp.from_xml(yang.data.get_xml_child(n, "provider-dhcp")), dhcp_relay=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__dhcp_relay.from_xml(yang.data.get_xml_child(n, "dhcp-relay")), addresses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6__addresses.from_xml(yang.data.get_xml_child(n, "addresses")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd(yang.adata.MNode):
    enabled: ?bool
    fixed_value: ?int
    profile_name: ?str

    def __init__(self, enabled: ?bool, fixed_value: ?int, profile_name: ?str):
        self.enabled = enabled
        self.fixed_value = fixed_value
        self.profile_name = profile_name

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('bfd')
        _enabled = self.enabled
        _fixed_value = self.fixed_value
        _profile_name = self.profile_name
        if _enabled is not None:
            res.children['enabled'] = yang.data.Leaf('enabled', _enabled)
        if _fixed_value is not None:
            res.children['fixed-value'] = yang.data.Leaf('fixed-value', _fixed_value)
        if _profile_name is not None:
            res.children['profile-name'] = yang.data.Leaf('profile-name', _profile_name)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd(enabled=n.get_opt_bool("enabled"), fixed_value=n.get_opt_int("fixed-value"), profile_name=n.get_opt_str("profile-name"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd(enabled=yang.data.from_xml_opt_bool(n, "enabled"), fixed_value=yang.data.from_xml_opt_int(n, "fixed-value"), profile_name=yang.data.from_xml_opt_str(n, "profile-name"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam(yang.adata.MNode):
    bfd: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd

    def __init__(self, bfd: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd):
        if bfd is not None:
            self.bfd = bfd
        else:
            self.bfd = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('oam')
        _bfd = self.bfd
        if _bfd is not None:
            res.children['bfd'] = self.bfd.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam(bfd=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd.from_gdata(n.get_container("bfd")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam(bfd=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam__bfd.from_xml(yang.data.get_xml_child(n, "bfd")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection(yang.adata.MNode):
    ipv4: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4
    ipv6: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6
    oam: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam

    def __init__(self, ipv4: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4, ipv6: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6, oam: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam):
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4()
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6()
        if oam is not None:
            self.oam = oam
        else:
            self.oam = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('ip-connection')
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        _oam = self.oam
        if _ipv4 is not None:
            res.children['ipv4'] = self.ipv4.to_gdata()
        if _ipv6 is not None:
            res.children['ipv6'] = self.ipv6.to_gdata()
        if _oam is not None:
            res.children['oam'] = self.oam.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection(ipv4=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4.from_gdata(n.get_container("ipv4")), ipv6=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6.from_gdata(n.get_container("ipv6")), oam=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam.from_gdata(n.get_container("oam")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection(ipv4=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv4.from_xml(yang.data.get_xml_child(n, "ipv4")), ipv6=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__ipv6.from_xml(yang.data.get_xml_child(n, "ipv6")), oam=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection__oam.from_xml(yang.data.get_xml_child(n, "oam")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('authentication')
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication()

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication()


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile(yang.adata.MNode):
    profile_name: ?str
    algorithm: ?str
    preshared_key: ?str

    def __init__(self, profile_name: ?str, algorithm: ?str, preshared_key: ?str):
        self.profile_name = profile_name
        self.algorithm = algorithm
        self.preshared_key = preshared_key

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('encryption-profile')
        _profile_name = self.profile_name
        _algorithm = self.algorithm
        _preshared_key = self.preshared_key
        if _profile_name is not None:
            res.children['profile-name'] = yang.data.Leaf('profile-name', _profile_name)
        if _algorithm is not None:
            res.children['algorithm'] = yang.data.Leaf('algorithm', _algorithm)
        if _preshared_key is not None:
            res.children['preshared-key'] = yang.data.Leaf('preshared-key', _preshared_key)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile(profile_name=n.get_opt_str("profile-name"), algorithm=n.get_opt_str("algorithm"), preshared_key=n.get_opt_str("preshared-key"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile(profile_name=yang.data.from_xml_opt_str(n, "profile-name"), algorithm=yang.data.from_xml_opt_str(n, "algorithm"), preshared_key=yang.data.from_xml_opt_str(n, "preshared-key"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption(yang.adata.MNode):
    enabled: ?bool
    layer: ?str
    encryption_profile: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile

    def __init__(self, enabled: ?bool, layer: ?str, encryption_profile: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile):
        self.enabled = enabled
        self.layer = layer
        if encryption_profile is not None:
            self.encryption_profile = encryption_profile
        else:
            self.encryption_profile = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('encryption')
        _enabled = self.enabled
        _layer = self.layer
        _encryption_profile = self.encryption_profile
        if _enabled is not None:
            res.children['enabled'] = yang.data.Leaf('enabled', _enabled)
        if _layer is not None:
            res.children['layer'] = yang.data.Leaf('layer', _layer)
        if _encryption_profile is not None:
            res.children['encryption-profile'] = self.encryption_profile.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption(enabled=n.get_opt_bool("enabled"), layer=n.get_opt_str("layer"), encryption_profile=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile.from_gdata(n.get_container("encryption-profile")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption(enabled=yang.data.from_xml_opt_bool(n, "enabled"), layer=yang.data.from_xml_opt_str(n, "layer"), encryption_profile=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption__encryption_profile.from_xml(yang.data.get_xml_child(n, "encryption-profile")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security(yang.adata.MNode):
    authentication: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication
    encryption: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption

    def __init__(self, authentication: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication, encryption: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption):
        if authentication is not None:
            self.authentication = authentication
        else:
            self.authentication = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication()
        if encryption is not None:
            self.encryption = encryption
        else:
            self.encryption = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('security')
        _authentication = self.authentication
        _encryption = self.encryption
        if _authentication is not None:
            res.children['authentication'] = self.authentication.to_gdata()
        if _encryption is not None:
            res.children['encryption'] = self.encryption.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security(authentication=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication.from_gdata(n.get_container("authentication")), encryption=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption.from_gdata(n.get_container("encryption")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security(authentication=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__authentication.from_xml(yang.data.get_xml_child(n, "authentication")), encryption=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security__encryption.from_xml(yang.data.get_xml_child(n, "encryption")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range(yang.adata.MNode):
    lower_port: ?int
    upper_port: ?int

    def __init__(self, lower_port: ?int, upper_port: ?int):
        self.lower_port = lower_port
        self.upper_port = upper_port

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('l4-src-port-range')
        _lower_port = self.lower_port
        _upper_port = self.upper_port
        if _lower_port is not None:
            res.children['lower-port'] = yang.data.Leaf('lower-port', _lower_port)
        if _upper_port is not None:
            res.children['upper-port'] = yang.data.Leaf('upper-port', _upper_port)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range(lower_port=n.get_opt_int("lower-port"), upper_port=n.get_opt_int("upper-port"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range(lower_port=yang.data.from_xml_opt_int(n, "lower-port"), upper_port=yang.data.from_xml_opt_int(n, "upper-port"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range(yang.adata.MNode):
    lower_port: ?int
    upper_port: ?int

    def __init__(self, lower_port: ?int, upper_port: ?int):
        self.lower_port = lower_port
        self.upper_port = upper_port

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('l4-dst-port-range')
        _lower_port = self.lower_port
        _upper_port = self.upper_port
        if _lower_port is not None:
            res.children['lower-port'] = yang.data.Leaf('lower-port', _lower_port)
        if _upper_port is not None:
            res.children['upper-port'] = yang.data.Leaf('upper-port', _upper_port)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range(lower_port=n.get_opt_int("lower-port"), upper_port=n.get_opt_int("upper-port"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range(lower_port=yang.data.from_xml_opt_int(n, "lower-port"), upper_port=yang.data.from_xml_opt_int(n, "upper-port"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow(yang.adata.MNode):
    dscp: ?int
    dot1p: ?int
    ipv4_src_prefix: ?str
    ipv6_src_prefix: ?str
    ipv4_dst_prefix: ?str
    ipv6_dst_prefix: ?str
    l4_src_port: ?int
    target_sites: list[str]
    l4_src_port_range: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range
    l4_dst_port: ?int
    l4_dst_port_range: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range
    protocol_field: ?value

    def __init__(self, dscp: ?int, dot1p: ?int, ipv4_src_prefix: ?str, ipv6_src_prefix: ?str, ipv4_dst_prefix: ?str, ipv6_dst_prefix: ?str, l4_src_port: ?int, target_sites: ?list[str]=None, l4_src_port_range: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range, l4_dst_port: ?int, l4_dst_port_range: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range, protocol_field: ?value):
        self.dscp = dscp
        self.dot1p = dot1p
        self.ipv4_src_prefix = ipv4_src_prefix
        self.ipv6_src_prefix = ipv6_src_prefix
        self.ipv4_dst_prefix = ipv4_dst_prefix
        self.ipv6_dst_prefix = ipv6_dst_prefix
        self.l4_src_port = l4_src_port
        if target_sites is not None:
            self.target_sites = target_sites
        else:
            self.target_sites = []
        if l4_src_port_range is not None:
            self.l4_src_port_range = l4_src_port_range
        else:
            self.l4_src_port_range = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range()
        self.l4_dst_port = l4_dst_port
        if l4_dst_port_range is not None:
            self.l4_dst_port_range = l4_dst_port_range
        else:
            self.l4_dst_port_range = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range()
        self.protocol_field = protocol_field

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('match-flow')
        _dscp = self.dscp
        _dot1p = self.dot1p
        _ipv4_src_prefix = self.ipv4_src_prefix
        _ipv6_src_prefix = self.ipv6_src_prefix
        _ipv4_dst_prefix = self.ipv4_dst_prefix
        _ipv6_dst_prefix = self.ipv6_dst_prefix
        _l4_src_port = self.l4_src_port
        _l4_src_port_range = self.l4_src_port_range
        _l4_dst_port = self.l4_dst_port
        _l4_dst_port_range = self.l4_dst_port_range
        _protocol_field = self.protocol_field
        if _dscp is not None:
            res.children['dscp'] = yang.data.Leaf('dscp', _dscp)
        if _dot1p is not None:
            res.children['dot1p'] = yang.data.Leaf('dot1p', _dot1p)
        if _ipv4_src_prefix is not None:
            res.children['ipv4-src-prefix'] = yang.data.Leaf('ipv4-src-prefix', _ipv4_src_prefix)
        if _ipv6_src_prefix is not None:
            res.children['ipv6-src-prefix'] = yang.data.Leaf('ipv6-src-prefix', _ipv6_src_prefix)
        if _ipv4_dst_prefix is not None:
            res.children['ipv4-dst-prefix'] = yang.data.Leaf('ipv4-dst-prefix', _ipv4_dst_prefix)
        if _ipv6_dst_prefix is not None:
            res.children['ipv6-dst-prefix'] = yang.data.Leaf('ipv6-dst-prefix', _ipv6_dst_prefix)
        if _l4_src_port is not None:
            res.children['l4-src-port'] = yang.data.Leaf('l4-src-port', _l4_src_port)
        res.children['target-sites'] = yang.data.LeafList('target-sites', self.target_sites)
        if _l4_src_port_range is not None:
            res.children['l4-src-port-range'] = self.l4_src_port_range.to_gdata()
        if _l4_dst_port is not None:
            res.children['l4-dst-port'] = yang.data.Leaf('l4-dst-port', _l4_dst_port)
        if _l4_dst_port_range is not None:
            res.children['l4-dst-port-range'] = self.l4_dst_port_range.to_gdata()
        if _protocol_field is not None:
            res.children['protocol-field'] = yang.data.Leaf('protocol-field', _protocol_field)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow(dscp=n.get_opt_int("dscp"), dot1p=n.get_opt_int("dot1p"), ipv4_src_prefix=n.get_opt_str("ipv4-src-prefix"), ipv6_src_prefix=n.get_opt_str("ipv6-src-prefix"), ipv4_dst_prefix=n.get_opt_str("ipv4-dst-prefix"), ipv6_dst_prefix=n.get_opt_str("ipv6-dst-prefix"), l4_src_port=n.get_opt_int("l4-src-port"), target_sites=n.get_opt_strs("target-sites"), l4_src_port_range=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range.from_gdata(n.get_container("l4-src-port-range")), l4_dst_port=n.get_opt_int("l4-dst-port"), l4_dst_port_range=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range.from_gdata(n.get_container("l4-dst-port-range")), protocol_field=n.get_opt_value("protocol-field"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow(dscp=yang.data.from_xml_opt_int(n, "dscp"), dot1p=yang.data.from_xml_opt_int(n, "dot1p"), ipv4_src_prefix=yang.data.from_xml_opt_str(n, "ipv4-src-prefix"), ipv6_src_prefix=yang.data.from_xml_opt_str(n, "ipv6-src-prefix"), ipv4_dst_prefix=yang.data.from_xml_opt_str(n, "ipv4-dst-prefix"), ipv6_dst_prefix=yang.data.from_xml_opt_str(n, "ipv6-dst-prefix"), l4_src_port=yang.data.from_xml_opt_int(n, "l4-src-port"), target_sites=yang.data.from_xml_opt_strs(n, "target-sites"), l4_src_port_range=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_src_port_range.from_xml(yang.data.get_xml_child(n, "l4-src-port-range")), l4_dst_port=yang.data.from_xml_opt_int(n, "l4-dst-port"), l4_dst_port_range=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow__l4_dst_port_range.from_xml(yang.data.get_xml_child(n, "l4-dst-port-range")), protocol_field=yang.data.from_xml_opt_value(n, "protocol-field"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry(yang.adata.MNode):
    id: str
    match_flow: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow
    match_application: ?str
    target_class_id: ?str

    def __init__(self, id: str, match_flow: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow, match_application: ?str, target_class_id: ?str):
        self.id = id
        if match_flow is not None:
            self.match_flow = match_flow
        else:
            self.match_flow = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow()
        self.match_application = match_application
        self.target_class_id = target_class_id

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.id)])
        _id = self.id
        _match_flow = self.match_flow
        _match_application = self.match_application
        _target_class_id = self.target_class_id
        if _id is not None:
            res.children['id'] = yang.data.Leaf('id', _id)
        if _match_flow is not None:
            res.children['match-flow'] = self.match_flow.to_gdata()
        if _match_application is not None:
            res.children['match-application'] = yang.data.Leaf('match-application', _match_application)
        if _target_class_id is not None:
            res.children['target-class-id'] = yang.data.Leaf('target-class-id', _target_class_id)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry(id=n.get_str("id"), match_flow=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow.from_gdata(n.get_container("match-flow")), match_application=n.get_opt_str("match-application"), target_class_id=n.get_opt_str("target-class-id"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry(id=yang.data.from_xml_str(n, "id"), match_flow=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule__match_flow.from_xml(yang.data.get_xml_child(n, "match-flow")), match_application=yang.data.from_xml_opt_str(n, "match-application"), target_class_id=yang.data.from_xml_opt_str(n, "target-class-id"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry]
    def __init__(self, elements=[]):
        self._name = 'rule'
        self.elements = elements

    def create(self, id):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry(id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('rule', ['id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy(yang.adata.MNode):
    rule: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule

    def __init__(self, rule: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule_entry]=[]):
        self.rule = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule(elements=rule)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('qos-classification-policy')
        _rule = self.rule
        if _rule is not None:
            res.children['rule'] = self.rule.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy(rule=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule.from_gdata(n.get_list("rule")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy(rule=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy__rule.from_xml(yang.data.get_xml_children(n, "rule")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency(yang.adata.MNode):
    use_lowest_latency: ?bool
    latency_boundary: ?int

    def __init__(self, use_lowest_latency: ?bool, latency_boundary: ?int):
        self.use_lowest_latency = use_lowest_latency
        self.latency_boundary = latency_boundary

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('latency')
        _use_lowest_latency = self.use_lowest_latency
        _latency_boundary = self.latency_boundary
        if _use_lowest_latency is not None:
            res.children['use-lowest-latency'] = yang.data.Leaf('use-lowest-latency', _use_lowest_latency)
        if _latency_boundary is not None:
            res.children['latency-boundary'] = yang.data.Leaf('latency-boundary', _latency_boundary)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency(use_lowest_latency=n.get_opt_bool("use-lowest-latency"), latency_boundary=n.get_opt_int("latency-boundary"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency(use_lowest_latency=yang.data.from_xml_opt_bool(n, "use-lowest-latency"), latency_boundary=yang.data.from_xml_opt_int(n, "latency-boundary"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter(yang.adata.MNode):
    use_lowest_jitter: ?bool
    latency_boundary: ?int

    def __init__(self, use_lowest_jitter: ?bool, latency_boundary: ?int):
        self.use_lowest_jitter = use_lowest_jitter
        self.latency_boundary = latency_boundary

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('jitter')
        _use_lowest_jitter = self.use_lowest_jitter
        _latency_boundary = self.latency_boundary
        if _use_lowest_jitter is not None:
            res.children['use-lowest-jitter'] = yang.data.Leaf('use-lowest-jitter', _use_lowest_jitter)
        if _latency_boundary is not None:
            res.children['latency-boundary'] = yang.data.Leaf('latency-boundary', _latency_boundary)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter(use_lowest_jitter=n.get_opt_bool("use-lowest-jitter"), latency_boundary=n.get_opt_int("latency-boundary"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter(use_lowest_jitter=yang.data.from_xml_opt_bool(n, "use-lowest-jitter"), latency_boundary=yang.data.from_xml_opt_int(n, "latency-boundary"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth(yang.adata.MNode):
    guaranteed_bw_percent: ?float
    end_to_end: ?bool

    def __init__(self, guaranteed_bw_percent: ?float, end_to_end: ?bool):
        self.guaranteed_bw_percent = guaranteed_bw_percent
        self.end_to_end = end_to_end

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('bandwidth')
        _guaranteed_bw_percent = self.guaranteed_bw_percent
        _end_to_end = self.end_to_end
        if _guaranteed_bw_percent is not None:
            res.children['guaranteed-bw-percent'] = yang.data.Leaf('guaranteed-bw-percent', _guaranteed_bw_percent)
        if _end_to_end is not None:
            res.children['end-to-end'] = yang.data.Leaf('end-to-end', _end_to_end)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth(guaranteed_bw_percent=n.get_opt_float("guaranteed-bw-percent"), end_to_end=n.get_opt_bool("end-to-end"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth(guaranteed_bw_percent=yang.data.from_xml_opt_float(n, "guaranteed-bw-percent"), end_to_end=yang.data.from_xml_opt_bool(n, "end-to-end"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry(yang.adata.MNode):
    class_id: str
    direction: ?str
    rate_limit: ?float
    latency: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency
    jitter: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter
    bandwidth: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth

    def __init__(self, class_id: str, direction: ?str, rate_limit: ?float, latency: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency, jitter: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter, bandwidth: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth):
        self.class_id = class_id
        self.direction = direction
        self.rate_limit = rate_limit
        if latency is not None:
            self.latency = latency
        else:
            self.latency = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency()
        if jitter is not None:
            self.jitter = jitter
        else:
            self.jitter = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter()
        if bandwidth is not None:
            self.bandwidth = bandwidth
        else:
            self.bandwidth = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.class_id)])
        _class_id = self.class_id
        _direction = self.direction
        _rate_limit = self.rate_limit
        _latency = self.latency
        _jitter = self.jitter
        _bandwidth = self.bandwidth
        if _class_id is not None:
            res.children['class-id'] = yang.data.Leaf('class-id', _class_id)
        if _direction is not None:
            res.children['direction'] = yang.data.Leaf('direction', _direction)
        if _rate_limit is not None:
            res.children['rate-limit'] = yang.data.Leaf('rate-limit', _rate_limit)
        if _latency is not None:
            res.children['latency'] = self.latency.to_gdata()
        if _jitter is not None:
            res.children['jitter'] = self.jitter.to_gdata()
        if _bandwidth is not None:
            res.children['bandwidth'] = self.bandwidth.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry(class_id=n.get_str("class-id"), direction=n.get_opt_str("direction"), rate_limit=n.get_opt_float("rate-limit"), latency=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency.from_gdata(n.get_container("latency")), jitter=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter.from_gdata(n.get_container("jitter")), bandwidth=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth.from_gdata(n.get_container("bandwidth")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry(class_id=yang.data.from_xml_str(n, "class-id"), direction=yang.data.from_xml_opt_str(n, "direction"), rate_limit=yang.data.from_xml_opt_float(n, "rate-limit"), latency=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__latency.from_xml(yang.data.get_xml_child(n, "latency")), jitter=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__jitter.from_xml(yang.data.get_xml_child(n, "jitter")), bandwidth=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class__bandwidth.from_xml(yang.data.get_xml_child(n, "bandwidth")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry]
    def __init__(self, elements=[]):
        self._name = 'class'
        self.elements = elements

    def create(self, class_id):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry(class_id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('class', ['class-id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes(yang.adata.MNode):
    class_: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class

    def __init__(self, class_: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class_entry]=[]):
        self.class_ = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class(elements=class_)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('classes')
        _class_ = self.class_
        if _class_ is not None:
            res.children['class'] = self.class_.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes(class_=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class.from_gdata(n.get_list("class")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes(class_=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes__class.from_xml(yang.data.get_xml_children(n, "class")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile(yang.adata.MNode):
    profile: ?str
    classes: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes

    def __init__(self, profile: ?str, classes: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes):
        self.profile = profile
        if classes is not None:
            self.classes = classes
        else:
            self.classes = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('qos-profile')
        _profile = self.profile
        _classes = self.classes
        if _profile is not None:
            res.children['profile'] = yang.data.Leaf('profile', _profile)
        if _classes is not None:
            res.children['classes'] = self.classes.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile(profile=n.get_opt_str("profile"), classes=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes.from_gdata(n.get_container("classes")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile(profile=yang.data.from_xml_opt_str(n, "profile"), classes=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile__classes.from_xml(yang.data.get_xml_child(n, "classes")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos(yang.adata.MNode):
    qos_classification_policy: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy
    qos_profile: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile

    def __init__(self, qos_classification_policy: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy, qos_profile: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile):
        if qos_classification_policy is not None:
            self.qos_classification_policy = qos_classification_policy
        else:
            self.qos_classification_policy = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy()
        if qos_profile is not None:
            self.qos_profile = qos_profile
        else:
            self.qos_profile = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('qos')
        _qos_classification_policy = self.qos_classification_policy
        _qos_profile = self.qos_profile
        if _qos_classification_policy is not None:
            res.children['qos-classification-policy'] = self.qos_classification_policy.to_gdata()
        if _qos_profile is not None:
            res.children['qos-profile'] = self.qos_profile.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos(qos_classification_policy=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy.from_gdata(n.get_container("qos-classification-policy")), qos_profile=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile.from_gdata(n.get_container("qos-profile")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos(qos_classification_policy=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_classification_policy.from_xml(yang.data.get_xml_child(n, "qos-classification-policy")), qos_profile=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos__qos_profile.from_xml(yang.data.get_xml_child(n, "qos-profile")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier(yang.adata.MNode):
    signalling_type: ?str

    def __init__(self, signalling_type: ?str):
        self.signalling_type = signalling_type

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('carrierscarrier')
        _signalling_type = self.signalling_type
        if _signalling_type is not None:
            res.children['signalling-type'] = yang.data.Leaf('signalling-type', _signalling_type)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier(signalling_type=n.get_opt_str("signalling-type"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier(signalling_type=yang.data.from_xml_opt_str(n, "signalling-type"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family(yang.adata.MNode):
    ipv4: ?bool
    ipv6: ?bool

    def __init__(self, ipv4: ?bool, ipv6: ?bool):
        self.ipv4 = ipv4
        self.ipv6 = ipv6

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('multicast-address-family')
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        if _ipv4 is not None:
            res.children['ipv4'] = yang.data.Leaf('ipv4', _ipv4)
        if _ipv6 is not None:
            res.children['ipv6'] = yang.data.Leaf('ipv6', _ipv6)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family(ipv4=n.get_opt_bool("ipv4"), ipv6=n.get_opt_bool("ipv6"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family(ipv4=yang.data.from_xml_opt_bool(n, "ipv4"), ipv6=yang.data.from_xml_opt_bool(n, "ipv6"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast(yang.adata.MNode):
    multicast_site_type: ?str
    multicast_address_family: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family
    protocol_type: ?str

    def __init__(self, multicast_site_type: ?str, multicast_address_family: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family, protocol_type: ?str):
        self.multicast_site_type = multicast_site_type
        if multicast_address_family is not None:
            self.multicast_address_family = multicast_address_family
        else:
            self.multicast_address_family = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family()
        self.protocol_type = protocol_type

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('multicast')
        _multicast_site_type = self.multicast_site_type
        _multicast_address_family = self.multicast_address_family
        _protocol_type = self.protocol_type
        if _multicast_site_type is not None:
            res.children['multicast-site-type'] = yang.data.Leaf('multicast-site-type', _multicast_site_type)
        if _multicast_address_family is not None:
            res.children['multicast-address-family'] = self.multicast_address_family.to_gdata()
        if _protocol_type is not None:
            res.children['protocol-type'] = yang.data.Leaf('protocol-type', _protocol_type)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast(multicast_site_type=n.get_opt_str("multicast-site-type"), multicast_address_family=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family.from_gdata(n.get_container("multicast-address-family")), protocol_type=n.get_opt_str("protocol-type"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast(multicast_site_type=yang.data.from_xml_opt_str(n, "multicast-site-type"), multicast_address_family=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast__multicast_address_family.from_xml(yang.data.get_xml_child(n, "multicast-address-family")), protocol_type=yang.data.from_xml_opt_str(n, "protocol-type"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service(yang.adata.MNode):
    svc_input_bandwidth: ?int
    svc_output_bandwidth: ?int
    svc_mtu: ?int
    qos: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos
    carrierscarrier: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier
    multicast: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast

    def __init__(self, svc_input_bandwidth: ?int, svc_output_bandwidth: ?int, svc_mtu: ?int, qos: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos, carrierscarrier: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier, multicast: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast):
        self.svc_input_bandwidth = svc_input_bandwidth
        self.svc_output_bandwidth = svc_output_bandwidth
        self.svc_mtu = svc_mtu
        if qos is not None:
            self.qos = qos
        else:
            self.qos = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos()
        if carrierscarrier is not None:
            self.carrierscarrier = carrierscarrier
        else:
            self.carrierscarrier = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier()
        if multicast is not None:
            self.multicast = multicast
        else:
            self.multicast = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('service')
        _svc_input_bandwidth = self.svc_input_bandwidth
        _svc_output_bandwidth = self.svc_output_bandwidth
        _svc_mtu = self.svc_mtu
        _qos = self.qos
        _carrierscarrier = self.carrierscarrier
        _multicast = self.multicast
        if _svc_input_bandwidth is not None:
            res.children['svc-input-bandwidth'] = yang.data.Leaf('svc-input-bandwidth', _svc_input_bandwidth)
        if _svc_output_bandwidth is not None:
            res.children['svc-output-bandwidth'] = yang.data.Leaf('svc-output-bandwidth', _svc_output_bandwidth)
        if _svc_mtu is not None:
            res.children['svc-mtu'] = yang.data.Leaf('svc-mtu', _svc_mtu)
        if _qos is not None:
            res.children['qos'] = self.qos.to_gdata()
        if _carrierscarrier is not None:
            res.children['carrierscarrier'] = self.carrierscarrier.to_gdata()
        if _multicast is not None:
            res.children['multicast'] = self.multicast.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service(svc_input_bandwidth=n.get_opt_int("svc-input-bandwidth"), svc_output_bandwidth=n.get_opt_int("svc-output-bandwidth"), svc_mtu=n.get_opt_int("svc-mtu"), qos=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos.from_gdata(n.get_container("qos")), carrierscarrier=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier.from_gdata(n.get_container("carrierscarrier")), multicast=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast.from_gdata(n.get_container("multicast")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service(svc_input_bandwidth=yang.data.from_xml_opt_int(n, "svc-input-bandwidth"), svc_output_bandwidth=yang.data.from_xml_opt_int(n, "svc-output-bandwidth"), svc_mtu=yang.data.from_xml_opt_int(n, "svc-mtu"), qos=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__qos.from_xml(yang.data.get_xml_child(n, "qos")), carrierscarrier=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__carrierscarrier.from_xml(yang.data.get_xml_child(n, "carrierscarrier")), multicast=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service__multicast.from_xml(yang.data.get_xml_child(n, "multicast")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry(yang.adata.MNode):
    target_site: str
    metric: ?int

    def __init__(self, target_site: str, metric: ?int):
        self.target_site = target_site
        self.metric = metric

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.target_site)])
        _target_site = self.target_site
        _metric = self.metric
        if _target_site is not None:
            res.children['target-site'] = yang.data.Leaf('target-site', _target_site)
        if _metric is not None:
            res.children['metric'] = yang.data.Leaf('metric', _metric)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry(target_site=n.get_str("target-site"), metric=n.get_opt_int("metric"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry(target_site=yang.data.from_xml_str(n, "target-site"), metric=yang.data.from_xml_opt_int(n, "metric"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry]
    def __init__(self, elements=[]):
        self._name = 'sham-link'
        self.elements = elements

    def create(self, target_site):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry(target_site)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('sham-link', ['target-site'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links(yang.adata.MNode):
    sham_link: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link

    def __init__(self, sham_link: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link_entry]=[]):
        self.sham_link = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link(elements=sham_link)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('sham-links')
        _sham_link = self.sham_link
        if _sham_link is not None:
            res.children['sham-link'] = self.sham_link.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links(sham_link=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link.from_gdata(n.get_list("sham-link")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links(sham_link=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links__sham_link.from_xml(yang.data.get_xml_children(n, "sham-link")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf(yang.adata.MNode):
    address_family: list[str]
    area_address: ?str
    metric: ?int
    sham_links: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links

    def __init__(self, address_family: ?list[str]=None, area_address: ?str, metric: ?int, sham_links: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links):
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = []
        self.area_address = area_address
        self.metric = metric
        if sham_links is not None:
            self.sham_links = sham_links
        else:
            self.sham_links = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('ospf')
        _area_address = self.area_address
        _metric = self.metric
        _sham_links = self.sham_links
        res.children['address-family'] = yang.data.LeafList('address-family', self.address_family)
        if _area_address is not None:
            res.children['area-address'] = yang.data.Leaf('area-address', _area_address)
        if _metric is not None:
            res.children['metric'] = yang.data.Leaf('metric', _metric)
        if _sham_links is not None:
            res.children['sham-links'] = self.sham_links.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf(address_family=n.get_opt_strs("address-family"), area_address=n.get_opt_str("area-address"), metric=n.get_opt_int("metric"), sham_links=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links.from_gdata(n.get_container("sham-links")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf(address_family=yang.data.from_xml_opt_strs(n, "address-family"), area_address=yang.data.from_xml_opt_str(n, "area-address"), metric=yang.data.from_xml_opt_int(n, "metric"), sham_links=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf__sham_links.from_xml(yang.data.get_xml_child(n, "sham-links")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp(yang.adata.MNode):
    autonomous_system: ?int
    address_family: list[str]

    def __init__(self, autonomous_system: ?int, address_family: ?list[str]=None):
        self.autonomous_system = autonomous_system
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = []

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('bgp')
        _autonomous_system = self.autonomous_system
        if _autonomous_system is not None:
            res.children['autonomous-system'] = yang.data.Leaf('autonomous-system', _autonomous_system)
        res.children['address-family'] = yang.data.LeafList('address-family', self.address_family)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp(autonomous_system=n.get_opt_int("autonomous-system"), address_family=n.get_opt_strs("address-family"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp(autonomous_system=yang.data.from_xml_opt_int(n, "autonomous-system"), address_family=yang.data.from_xml_opt_strs(n, "address-family"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry(yang.adata.MNode):
    lan: str
    next_hop: str
    lan_tag: ?str

    def __init__(self, lan: str, next_hop: str, lan_tag: ?str):
        self.lan = lan
        self.next_hop = next_hop
        self.lan_tag = lan_tag

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.lan), str(self.next_hop)])
        _lan = self.lan
        _next_hop = self.next_hop
        _lan_tag = self.lan_tag
        if _lan is not None:
            res.children['lan'] = yang.data.Leaf('lan', _lan)
        if _next_hop is not None:
            res.children['next-hop'] = yang.data.Leaf('next-hop', _next_hop)
        if _lan_tag is not None:
            res.children['lan-tag'] = yang.data.Leaf('lan-tag', _lan_tag)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry(lan=n.get_str("lan"), next_hop=n.get_str("next-hop"), lan_tag=n.get_opt_str("lan-tag"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry(lan=yang.data.from_xml_str(n, "lan"), next_hop=yang.data.from_xml_str(n, "next-hop"), lan_tag=yang.data.from_xml_opt_str(n, "lan-tag"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry]
    def __init__(self, elements=[]):
        self._name = 'ipv4-lan-prefixes'
        self.elements = elements

    def create(self, lan, next_hop):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry(lan, next_hop)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('ipv4-lan-prefixes', ['lan', 'next-hop'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry(yang.adata.MNode):
    lan: str
    next_hop: str
    lan_tag: ?str

    def __init__(self, lan: str, next_hop: str, lan_tag: ?str):
        self.lan = lan
        self.next_hop = next_hop
        self.lan_tag = lan_tag

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.lan), str(self.next_hop)])
        _lan = self.lan
        _next_hop = self.next_hop
        _lan_tag = self.lan_tag
        if _lan is not None:
            res.children['lan'] = yang.data.Leaf('lan', _lan)
        if _next_hop is not None:
            res.children['next-hop'] = yang.data.Leaf('next-hop', _next_hop)
        if _lan_tag is not None:
            res.children['lan-tag'] = yang.data.Leaf('lan-tag', _lan_tag)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry(lan=n.get_str("lan"), next_hop=n.get_str("next-hop"), lan_tag=n.get_opt_str("lan-tag"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry(lan=yang.data.from_xml_str(n, "lan"), next_hop=yang.data.from_xml_str(n, "next-hop"), lan_tag=yang.data.from_xml_opt_str(n, "lan-tag"))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry]
    def __init__(self, elements=[]):
        self._name = 'ipv6-lan-prefixes'
        self.elements = elements

    def create(self, lan, next_hop):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry(lan, next_hop)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('ipv6-lan-prefixes', ['lan', 'next-hop'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes(yang.adata.MNode):
    ipv4_lan_prefixes: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes
    ipv6_lan_prefixes: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes

    def __init__(self, ipv4_lan_prefixes: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes_entry]=[], ipv6_lan_prefixes: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes_entry]=[]):
        self.ipv4_lan_prefixes = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes(elements=ipv4_lan_prefixes)
        self.ipv6_lan_prefixes = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes(elements=ipv6_lan_prefixes)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('cascaded-lan-prefixes')
        _ipv4_lan_prefixes = self.ipv4_lan_prefixes
        _ipv6_lan_prefixes = self.ipv6_lan_prefixes
        if _ipv4_lan_prefixes is not None:
            res.children['ipv4-lan-prefixes'] = self.ipv4_lan_prefixes.to_gdata()
        if _ipv6_lan_prefixes is not None:
            res.children['ipv6-lan-prefixes'] = self.ipv6_lan_prefixes.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes(ipv4_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes.from_gdata(n.get_list("ipv4-lan-prefixes")), ipv6_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes.from_gdata(n.get_list("ipv6-lan-prefixes")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes(ipv4_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv4_lan_prefixes.from_xml(yang.data.get_xml_children(n, "ipv4-lan-prefixes")), ipv6_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes__ipv6_lan_prefixes.from_xml(yang.data.get_xml_children(n, "ipv6-lan-prefixes")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static(yang.adata.MNode):
    cascaded_lan_prefixes: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes

    def __init__(self, cascaded_lan_prefixes: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes):
        if cascaded_lan_prefixes is not None:
            self.cascaded_lan_prefixes = cascaded_lan_prefixes
        else:
            self.cascaded_lan_prefixes = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('static')
        _cascaded_lan_prefixes = self.cascaded_lan_prefixes
        if _cascaded_lan_prefixes is not None:
            res.children['cascaded-lan-prefixes'] = self.cascaded_lan_prefixes.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static(cascaded_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes.from_gdata(n.get_container("cascaded-lan-prefixes")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static(cascaded_lan_prefixes=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static__cascaded_lan_prefixes.from_xml(yang.data.get_xml_child(n, "cascaded-lan-prefixes")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip(yang.adata.MNode):
    address_family: list[str]

    def __init__(self, address_family: ?list[str]=None):
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = []

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('rip')
        res.children['address-family'] = yang.data.LeafList('address-family', self.address_family)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip(address_family=n.get_opt_strs("address-family"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip(address_family=yang.data.from_xml_opt_strs(n, "address-family"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp(yang.adata.MNode):
    address_family: list[str]

    def __init__(self, address_family: ?list[str]=None):
        if address_family is not None:
            self.address_family = address_family
        else:
            self.address_family = []

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('vrrp')
        res.children['address-family'] = yang.data.LeafList('address-family', self.address_family)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp(address_family=n.get_opt_strs("address-family"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp(address_family=yang.data.from_xml_opt_strs(n, "address-family"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry(yang.adata.MNode):
    type: str
    ospf: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf
    bgp: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp
    static: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static
    rip: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip
    vrrp: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp

    def __init__(self, type: str, ospf: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf, bgp: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp, static: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static, rip: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip, vrrp: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp):
        self.type = type
        if ospf is not None:
            self.ospf = ospf
        else:
            self.ospf = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf()
        if bgp is not None:
            self.bgp = bgp
        else:
            self.bgp = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp()
        if static is not None:
            self.static = static
        else:
            self.static = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static()
        if rip is not None:
            self.rip = rip
        else:
            self.rip = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip()
        if vrrp is not None:
            self.vrrp = vrrp
        else:
            self.vrrp = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.type)])
        _type = self.type
        _ospf = self.ospf
        _bgp = self.bgp
        _static = self.static
        _rip = self.rip
        _vrrp = self.vrrp
        if _type is not None:
            res.children['type'] = yang.data.Leaf('type', _type)
        if _ospf is not None:
            res.children['ospf'] = self.ospf.to_gdata()
        if _bgp is not None:
            res.children['bgp'] = self.bgp.to_gdata()
        if _static is not None:
            res.children['static'] = self.static.to_gdata()
        if _rip is not None:
            res.children['rip'] = self.rip.to_gdata()
        if _vrrp is not None:
            res.children['vrrp'] = self.vrrp.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry(type=n.get_str("type"), ospf=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf.from_gdata(n.get_container("ospf")), bgp=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp.from_gdata(n.get_container("bgp")), static=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static.from_gdata(n.get_container("static")), rip=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip.from_gdata(n.get_container("rip")), vrrp=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp.from_gdata(n.get_container("vrrp")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry(type=yang.data.from_xml_str(n, "type"), ospf=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__ospf.from_xml(yang.data.get_xml_child(n, "ospf")), bgp=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__bgp.from_xml(yang.data.get_xml_child(n, "bgp")), static=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__static.from_xml(yang.data.get_xml_child(n, "static")), rip=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__rip.from_xml(yang.data.get_xml_child(n, "rip")), vrrp=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol__vrrp.from_xml(yang.data.get_xml_child(n, "vrrp")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry]
    def __init__(self, elements=[]):
        self._name = 'routing-protocol'
        self.elements = elements

    def create(self, type):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry(type)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('routing-protocol', ['type'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols(yang.adata.MNode):
    routing_protocol: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol

    def __init__(self, routing_protocol: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol_entry]=[]):
        self.routing_protocol = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol(elements=routing_protocol)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('routing-protocols')
        _routing_protocol = self.routing_protocol
        if _routing_protocol is not None:
            res.children['routing-protocol'] = self.routing_protocol.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols(routing_protocol=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol.from_gdata(n.get_list("routing-protocol")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols(routing_protocol=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols__routing_protocol.from_xml(yang.data.get_xml_children(n, "routing-protocol")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability(yang.adata.MNode):
    access_priority: ?int

    def __init__(self, access_priority: ?int):
        self.access_priority = access_priority

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('availability')
        _access_priority = self.access_priority
        if _access_priority is not None:
            res.children['access-priority'] = yang.data.Leaf('access-priority', _access_priority)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability(access_priority=n.get_opt_int("access-priority"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability(access_priority=yang.data.from_xml_opt_int(n, "access-priority"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment(yang.adata.MNode):
    vpn_policy_id: ?str
    vpn_id: ?str
    site_role: ?str

    def __init__(self, vpn_policy_id: ?str, vpn_id: ?str, site_role: ?str):
        self.vpn_policy_id = vpn_policy_id
        self.vpn_id = vpn_id
        self.site_role = site_role

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('vpn-attachment')
        _vpn_policy_id = self.vpn_policy_id
        _vpn_id = self.vpn_id
        _site_role = self.site_role
        if _vpn_policy_id is not None:
            res.children['vpn-policy-id'] = yang.data.Leaf('vpn-policy-id', _vpn_policy_id)
        if _vpn_id is not None:
            res.children['vpn-id'] = yang.data.Leaf('vpn-id', _vpn_id)
        if _site_role is not None:
            res.children['site-role'] = yang.data.Leaf('site-role', _site_role)
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment(vpn_policy_id=n.get_opt_str("vpn-policy-id"), vpn_id=n.get_opt_str("vpn-id"), site_role=n.get_opt_str("site-role"))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment(vpn_policy_id=yang.data.from_xml_opt_str(n, "vpn-policy-id"), vpn_id=yang.data.from_xml_opt_str(n, "vpn-id"), site_role=yang.data.from_xml_opt_str(n, "site-role"))


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry(yang.adata.MNode):
    site_network_access_id: str
    site_network_access_type: ?str
    location_reference: ?str
    device_reference: ?str
    access_diversity: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity
    bearer: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer
    ip_connection: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection
    security: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security
    service: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service
    routing_protocols: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols
    availability: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability
    vpn_attachment: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment

    def __init__(self, site_network_access_id: str, site_network_access_type: ?str, location_reference: ?str, device_reference: ?str, access_diversity: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity, bearer: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer, ip_connection: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection, security: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security, service: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service, routing_protocols: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols, availability: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability, vpn_attachment: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment):
        self.site_network_access_id = site_network_access_id
        self.site_network_access_type = site_network_access_type
        self.location_reference = location_reference
        self.device_reference = device_reference
        if access_diversity is not None:
            self.access_diversity = access_diversity
        else:
            self.access_diversity = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity()
        if bearer is not None:
            self.bearer = bearer
        else:
            self.bearer = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer()
        if ip_connection is not None:
            self.ip_connection = ip_connection
        else:
            self.ip_connection = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection()
        if security is not None:
            self.security = security
        else:
            self.security = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security()
        if service is not None:
            self.service = service
        else:
            self.service = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service()
        if routing_protocols is not None:
            self.routing_protocols = routing_protocols
        else:
            self.routing_protocols = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols()
        if availability is not None:
            self.availability = availability
        else:
            self.availability = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability()
        if vpn_attachment is not None:
            self.vpn_attachment = vpn_attachment
        else:
            self.vpn_attachment = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.site_network_access_id)])
        _site_network_access_id = self.site_network_access_id
        _site_network_access_type = self.site_network_access_type
        _location_reference = self.location_reference
        _device_reference = self.device_reference
        _access_diversity = self.access_diversity
        _bearer = self.bearer
        _ip_connection = self.ip_connection
        _security = self.security
        _service = self.service
        _routing_protocols = self.routing_protocols
        _availability = self.availability
        _vpn_attachment = self.vpn_attachment
        if _site_network_access_id is not None:
            res.children['site-network-access-id'] = yang.data.Leaf('site-network-access-id', _site_network_access_id)
        if _site_network_access_type is not None:
            res.children['site-network-access-type'] = yang.data.Leaf('site-network-access-type', _site_network_access_type)
        if _location_reference is not None:
            res.children['location-reference'] = yang.data.Leaf('location-reference', _location_reference)
        if _device_reference is not None:
            res.children['device-reference'] = yang.data.Leaf('device-reference', _device_reference)
        if _access_diversity is not None:
            res.children['access-diversity'] = self.access_diversity.to_gdata()
        if _bearer is not None:
            res.children['bearer'] = self.bearer.to_gdata()
        if _ip_connection is not None:
            res.children['ip-connection'] = self.ip_connection.to_gdata()
        if _security is not None:
            res.children['security'] = self.security.to_gdata()
        if _service is not None:
            res.children['service'] = self.service.to_gdata()
        if _routing_protocols is not None:
            res.children['routing-protocols'] = self.routing_protocols.to_gdata()
        if _availability is not None:
            res.children['availability'] = self.availability.to_gdata()
        if _vpn_attachment is not None:
            res.children['vpn-attachment'] = self.vpn_attachment.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry(site_network_access_id=n.get_str("site-network-access-id"), site_network_access_type=n.get_opt_str("site-network-access-type"), location_reference=n.get_opt_str("location-reference"), device_reference=n.get_opt_str("device-reference"), access_diversity=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity.from_gdata(n.get_container("access-diversity")), bearer=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer.from_gdata(n.get_container("bearer")), ip_connection=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection.from_gdata(n.get_container("ip-connection")), security=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security.from_gdata(n.get_container("security")), service=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service.from_gdata(n.get_container("service")), routing_protocols=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols.from_gdata(n.get_container("routing-protocols")), availability=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability.from_gdata(n.get_container("availability")), vpn_attachment=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment.from_gdata(n.get_container("vpn-attachment")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry(site_network_access_id=yang.data.from_xml_str(n, "site-network-access-id"), site_network_access_type=yang.data.from_xml_opt_str(n, "site-network-access-type"), location_reference=yang.data.from_xml_opt_str(n, "location-reference"), device_reference=yang.data.from_xml_opt_str(n, "device-reference"), access_diversity=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__access_diversity.from_xml(yang.data.get_xml_child(n, "access-diversity")), bearer=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__bearer.from_xml(yang.data.get_xml_child(n, "bearer")), ip_connection=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__ip_connection.from_xml(yang.data.get_xml_child(n, "ip-connection")), security=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__security.from_xml(yang.data.get_xml_child(n, "security")), service=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__service.from_xml(yang.data.get_xml_child(n, "service")), routing_protocols=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__routing_protocols.from_xml(yang.data.get_xml_child(n, "routing-protocols")), availability=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__availability.from_xml(yang.data.get_xml_child(n, "availability")), vpn_attachment=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access__vpn_attachment.from_xml(yang.data.get_xml_child(n, "vpn-attachment")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry]
    def __init__(self, elements=[]):
        self._name = 'site-network-access'
        self.elements = elements

    def create(self, site_network_access_id):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry(site_network_access_id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('site-network-access', ['site-network-access-id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses(yang.adata.MNode):
    site_network_access: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access

    def __init__(self, site_network_access: list[ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access_entry]=[]):
        self.site_network_access = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access(elements=site_network_access)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('site-network-accesses')
        _site_network_access = self.site_network_access
        if _site_network_access is not None:
            res.children['site-network-access'] = self.site_network_access.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses(site_network_access=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access.from_gdata(n.get_list("site-network-access")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses(site_network_access=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses__site_network_access.from_xml(yang.data.get_xml_children(n, "site-network-access")))


class ietf_l3vpn_svc__l3vpn_svc__sites__site_entry(yang.adata.MNode):
    site_id: str
    requested_site_start: ?str
    requested_site_stop: ?str
    locations: ietf_l3vpn_svc__l3vpn_svc__sites__site__locations
    devices: ietf_l3vpn_svc__l3vpn_svc__sites__site__devices
    site_diversity: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity
    management: ietf_l3vpn_svc__l3vpn_svc__sites__site__management
    vpn_policies: ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies
    site_vpn_flavor: ?str
    maximum_routes: ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes
    security: ietf_l3vpn_svc__l3vpn_svc__sites__site__security
    service: ietf_l3vpn_svc__l3vpn_svc__sites__site__service
    traffic_protection: ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection
    routing_protocols: ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols
    actual_site_start: ?str
    actual_site_stop: ?str
    site_network_accesses: ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses

    def __init__(self, site_id: str, requested_site_start: ?str, requested_site_stop: ?str, locations: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__locations, devices: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__devices, site_diversity: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity, management: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__management, vpn_policies: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies, site_vpn_flavor: ?str, maximum_routes: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes, security: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__security, service: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__service, traffic_protection: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection, routing_protocols: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols, actual_site_start: ?str, actual_site_stop: ?str, site_network_accesses: ?ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses):
        self.site_id = site_id
        self.requested_site_start = requested_site_start
        self.requested_site_stop = requested_site_stop
        if locations is not None:
            self.locations = locations
        else:
            self.locations = ietf_l3vpn_svc__l3vpn_svc__sites__site__locations()
        if devices is not None:
            self.devices = devices
        else:
            self.devices = ietf_l3vpn_svc__l3vpn_svc__sites__site__devices()
        if site_diversity is not None:
            self.site_diversity = site_diversity
        else:
            self.site_diversity = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity()
        if management is not None:
            self.management = management
        else:
            self.management = ietf_l3vpn_svc__l3vpn_svc__sites__site__management()
        if vpn_policies is not None:
            self.vpn_policies = vpn_policies
        else:
            self.vpn_policies = ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies()
        self.site_vpn_flavor = site_vpn_flavor
        if maximum_routes is not None:
            self.maximum_routes = maximum_routes
        else:
            self.maximum_routes = ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes()
        if security is not None:
            self.security = security
        else:
            self.security = ietf_l3vpn_svc__l3vpn_svc__sites__site__security()
        if service is not None:
            self.service = service
        else:
            self.service = ietf_l3vpn_svc__l3vpn_svc__sites__site__service()
        if traffic_protection is not None:
            self.traffic_protection = traffic_protection
        else:
            self.traffic_protection = ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection()
        if routing_protocols is not None:
            self.routing_protocols = routing_protocols
        else:
            self.routing_protocols = ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols()
        self.actual_site_start = actual_site_start
        self.actual_site_stop = actual_site_stop
        if site_network_accesses is not None:
            self.site_network_accesses = site_network_accesses
        else:
            self.site_network_accesses = ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.ListElement([str(self.site_id)])
        _site_id = self.site_id
        _requested_site_start = self.requested_site_start
        _requested_site_stop = self.requested_site_stop
        _locations = self.locations
        _devices = self.devices
        _site_diversity = self.site_diversity
        _management = self.management
        _vpn_policies = self.vpn_policies
        _site_vpn_flavor = self.site_vpn_flavor
        _maximum_routes = self.maximum_routes
        _security = self.security
        _service = self.service
        _traffic_protection = self.traffic_protection
        _routing_protocols = self.routing_protocols
        _actual_site_start = self.actual_site_start
        _actual_site_stop = self.actual_site_stop
        _site_network_accesses = self.site_network_accesses
        if _site_id is not None:
            res.children['site-id'] = yang.data.Leaf('site-id', _site_id)
        if _requested_site_start is not None:
            res.children['requested-site-start'] = yang.data.Leaf('requested-site-start', _requested_site_start)
        if _requested_site_stop is not None:
            res.children['requested-site-stop'] = yang.data.Leaf('requested-site-stop', _requested_site_stop)
        if _locations is not None:
            res.children['locations'] = self.locations.to_gdata()
        if _devices is not None:
            res.children['devices'] = self.devices.to_gdata()
        if _site_diversity is not None:
            res.children['site-diversity'] = self.site_diversity.to_gdata()
        if _management is not None:
            res.children['management'] = self.management.to_gdata()
        if _vpn_policies is not None:
            res.children['vpn-policies'] = self.vpn_policies.to_gdata()
        if _site_vpn_flavor is not None:
            res.children['site-vpn-flavor'] = yang.data.Leaf('site-vpn-flavor', _site_vpn_flavor)
        if _maximum_routes is not None:
            res.children['maximum-routes'] = self.maximum_routes.to_gdata()
        if _security is not None:
            res.children['security'] = self.security.to_gdata()
        if _service is not None:
            res.children['service'] = self.service.to_gdata()
        if _traffic_protection is not None:
            res.children['traffic-protection'] = self.traffic_protection.to_gdata()
        if _routing_protocols is not None:
            res.children['routing-protocols'] = self.routing_protocols.to_gdata()
        if _actual_site_start is not None:
            res.children['actual-site-start'] = yang.data.Leaf('actual-site-start', _actual_site_start)
        if _actual_site_stop is not None:
            res.children['actual-site-stop'] = yang.data.Leaf('actual-site-stop', _actual_site_stop)
        if _site_network_accesses is not None:
            res.children['site-network-accesses'] = self.site_network_accesses.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site_entry(site_id=n.get_str("site-id"), requested_site_start=n.get_opt_str("requested-site-start"), requested_site_stop=n.get_opt_str("requested-site-stop"), locations=ietf_l3vpn_svc__l3vpn_svc__sites__site__locations.from_gdata(n.get_container("locations")), devices=ietf_l3vpn_svc__l3vpn_svc__sites__site__devices.from_gdata(n.get_container("devices")), site_diversity=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity.from_gdata(n.get_container("site-diversity")), management=ietf_l3vpn_svc__l3vpn_svc__sites__site__management.from_gdata(n.get_container("management")), vpn_policies=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies.from_gdata(n.get_container("vpn-policies")), site_vpn_flavor=n.get_opt_str("site-vpn-flavor"), maximum_routes=ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes.from_gdata(n.get_container("maximum-routes")), security=ietf_l3vpn_svc__l3vpn_svc__sites__site__security.from_gdata(n.get_container("security")), service=ietf_l3vpn_svc__l3vpn_svc__sites__site__service.from_gdata(n.get_container("service")), traffic_protection=ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection.from_gdata(n.get_container("traffic-protection")), routing_protocols=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols.from_gdata(n.get_container("routing-protocols")), actual_site_start=n.get_opt_str("actual-site-start"), actual_site_stop=n.get_opt_str("actual-site-stop"), site_network_accesses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses.from_gdata(n.get_container("site-network-accesses")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites__site_entry:
        return ietf_l3vpn_svc__l3vpn_svc__sites__site_entry(site_id=yang.data.from_xml_str(n, "site-id"), requested_site_start=yang.data.from_xml_opt_str(n, "requested-site-start"), requested_site_stop=yang.data.from_xml_opt_str(n, "requested-site-stop"), locations=ietf_l3vpn_svc__l3vpn_svc__sites__site__locations.from_xml(yang.data.get_xml_child(n, "locations")), devices=ietf_l3vpn_svc__l3vpn_svc__sites__site__devices.from_xml(yang.data.get_xml_child(n, "devices")), site_diversity=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_diversity.from_xml(yang.data.get_xml_child(n, "site-diversity")), management=ietf_l3vpn_svc__l3vpn_svc__sites__site__management.from_xml(yang.data.get_xml_child(n, "management")), vpn_policies=ietf_l3vpn_svc__l3vpn_svc__sites__site__vpn_policies.from_xml(yang.data.get_xml_child(n, "vpn-policies")), site_vpn_flavor=yang.data.from_xml_opt_str(n, "site-vpn-flavor"), maximum_routes=ietf_l3vpn_svc__l3vpn_svc__sites__site__maximum_routes.from_xml(yang.data.get_xml_child(n, "maximum-routes")), security=ietf_l3vpn_svc__l3vpn_svc__sites__site__security.from_xml(yang.data.get_xml_child(n, "security")), service=ietf_l3vpn_svc__l3vpn_svc__sites__site__service.from_xml(yang.data.get_xml_child(n, "service")), traffic_protection=ietf_l3vpn_svc__l3vpn_svc__sites__site__traffic_protection.from_xml(yang.data.get_xml_child(n, "traffic-protection")), routing_protocols=ietf_l3vpn_svc__l3vpn_svc__sites__site__routing_protocols.from_xml(yang.data.get_xml_child(n, "routing-protocols")), actual_site_start=yang.data.from_xml_opt_str(n, "actual-site-start"), actual_site_stop=yang.data.from_xml_opt_str(n, "actual-site-stop"), site_network_accesses=ietf_l3vpn_svc__l3vpn_svc__sites__site__site_network_accesses.from_xml(yang.data.get_xml_child(n, "site-network-accesses")))

class ietf_l3vpn_svc__l3vpn_svc__sites__site(yang.adata.MNode):
    elements: list[ietf_l3vpn_svc__l3vpn_svc__sites__site_entry]
    def __init__(self, elements=[]):
        self._name = 'site'
        self.elements = elements

    def create(self, site_id):
        res = ietf_l3vpn_svc__l3vpn_svc__sites__site_entry(site_id)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.data.List('site', ['site-id'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.data.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.data.List) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site_entry]:
        res = []
        for e in n.elements:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[ietf_l3vpn_svc__l3vpn_svc__sites__site_entry]:
        res = []
        for node in nodes:
            res.append(ietf_l3vpn_svc__l3vpn_svc__sites__site_entry.from_xml(node))
        return res


class ietf_l3vpn_svc__l3vpn_svc__sites(yang.adata.MNode):
    site: ietf_l3vpn_svc__l3vpn_svc__sites__site

    def __init__(self, site: list[ietf_l3vpn_svc__l3vpn_svc__sites__site_entry]=[]):
        self.site = ietf_l3vpn_svc__l3vpn_svc__sites__site(elements=site)

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('sites')
        _site = self.site
        if _site is not None:
            res.children['site'] = self.site.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites:
        return ietf_l3vpn_svc__l3vpn_svc__sites(site=ietf_l3vpn_svc__l3vpn_svc__sites__site.from_gdata(n.get_list("site")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc__sites:
        return ietf_l3vpn_svc__l3vpn_svc__sites(site=ietf_l3vpn_svc__l3vpn_svc__sites__site.from_xml(yang.data.get_xml_children(n, "site")))


class ietf_l3vpn_svc__l3vpn_svc(yang.adata.MNode):
    vpn_profiles: ietf_l3vpn_svc__l3vpn_svc__vpn_profiles
    vpn_services: ietf_l3vpn_svc__l3vpn_svc__vpn_services
    sites: ietf_l3vpn_svc__l3vpn_svc__sites

    def __init__(self, vpn_profiles: ?ietf_l3vpn_svc__l3vpn_svc__vpn_profiles, vpn_services: ?ietf_l3vpn_svc__l3vpn_svc__vpn_services, sites: ?ietf_l3vpn_svc__l3vpn_svc__sites):
        if vpn_profiles is not None:
            self.vpn_profiles = vpn_profiles
        else:
            self.vpn_profiles = ietf_l3vpn_svc__l3vpn_svc__vpn_profiles()
        if vpn_services is not None:
            self.vpn_services = vpn_services
        else:
            self.vpn_services = ietf_l3vpn_svc__l3vpn_svc__vpn_services()
        if sites is not None:
            self.sites = sites
        else:
            self.sites = ietf_l3vpn_svc__l3vpn_svc__sites()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Container_('l3vpn-svc')
        _vpn_profiles = self.vpn_profiles
        _vpn_services = self.vpn_services
        _sites = self.sites
        if _vpn_profiles is not None:
            res.children['vpn-profiles'] = self.vpn_profiles.to_gdata()
        if _vpn_services is not None:
            res.children['vpn-services'] = self.vpn_services.to_gdata()
        if _sites is not None:
            res.children['sites'] = self.sites.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc__l3vpn_svc:
        return ietf_l3vpn_svc__l3vpn_svc(vpn_profiles=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles.from_gdata(n.get_container("vpn-profiles")), vpn_services=ietf_l3vpn_svc__l3vpn_svc__vpn_services.from_gdata(n.get_container("vpn-services")), sites=ietf_l3vpn_svc__l3vpn_svc__sites.from_gdata(n.get_container("sites")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc__l3vpn_svc:
        return ietf_l3vpn_svc__l3vpn_svc(vpn_profiles=ietf_l3vpn_svc__l3vpn_svc__vpn_profiles.from_xml(yang.data.get_xml_child(n, "vpn-profiles")), vpn_services=ietf_l3vpn_svc__l3vpn_svc__vpn_services.from_xml(yang.data.get_xml_child(n, "vpn-services")), sites=ietf_l3vpn_svc__l3vpn_svc__sites.from_xml(yang.data.get_xml_child(n, "sites")))


class ietf_l3vpn_svc(yang.adata.MNode):
    l3vpn_svc: ietf_l3vpn_svc__l3vpn_svc

    def __init__(self, l3vpn_svc: ?ietf_l3vpn_svc__l3vpn_svc):
        if l3vpn_svc is not None:
            self.l3vpn_svc = l3vpn_svc
        else:
            self.l3vpn_svc = ietf_l3vpn_svc__l3vpn_svc()

    def to_gdata(self) -> yang.data.Node:
        res = yang.data.Module('ietf-l3vpn-svc')
        _l3vpn_svc = self.l3vpn_svc
        if _l3vpn_svc is not None:
            res.children['l3vpn-svc'] = self.l3vpn_svc.to_gdata()
        return res

    @staticmethod
    def from_gdata(n: yang.data.Node) -> ietf_l3vpn_svc:
        return ietf_l3vpn_svc(l3vpn_svc=ietf_l3vpn_svc__l3vpn_svc.from_gdata(n.get_container("l3vpn-svc")))

    @staticmethod
    def from_xml(n: xml.Node) -> ietf_l3vpn_svc:
        return ietf_l3vpn_svc(l3vpn_svc=ietf_l3vpn_svc__l3vpn_svc.from_xml(yang.data.get_xml_child(n, "l3vpn-svc")))

